servers: [
  [
    '127.0.0.1:10001',
    3
  ],
  [
    '127.0.0.1:10002',
    2
  ],
  [
    '127.0.0.1:10003',
    2
  ],
  [
    '127.0.0.1:10004',
    2
  ],
  [
    '127.0.0.1:10005',
    3
  ],
  [
    '127.0.0.1:10006',
    3
  ],
  '127.0.0.1:10007',
  [
    '127.0.0.1:10008',
    2
  ],
  [
    '127.0.0.1:10009',
    3
  ]
]
Checking port 10003 for existing process
Using port 10003
Fork successful, pid 11861
Checking 127.0.0.1:10003
Checking port 10007 for existing process
Using port 10007
Fork successful, pid 11862
Checking 127.0.0.1:10007
Checking port 10004 for existing process
Using port 10004
Fork successful, pid 11868
Checking 127.0.0.1:10004
Checking port 10002 for existing process
Using port 10002
Fork successful, pid 11873
Checking 127.0.0.1:10002
Checking port 10009 for existing process
Using port 10009
Fork successful, pid 11875
Checking 127.0.0.1:10009
Checking port 10006 for existing process
Using port 10006
Fork successful, pid 11886
Checking 127.0.0.1:10006
Checking port 10005 for existing process
Using port 10005
Fork successful, pid 11892
Checking 127.0.0.1:10005
Checking port 10008 for existing process
Using port 10008
Fork successful, pid 11898
Checking 127.0.0.1:10008
Checking port 10001 for existing process
Using port 10001
Fork successful, pid 11904
Checking 127.0.0.1:10001
running Traditional/Text sync
C: new - {
  namespace => '1288727994.11859.',
  protocol => 'Text',
  selector => 'Traditional',
  servers => [
    [
      '127.0.0.1:10001',
      3
    ],
    [
      '127.0.0.1:10002',
      2
    ],
    [
      '127.0.0.1:10003',
      2
    ],
    [
      '127.0.0.1:10004',
      2
    ],
    [
      '127.0.0.1:10005',
      3
    ],
    [
      '127.0.0.1:10006',
      3
    ],
    '127.0.0.1:10007',
    [
      '127.0.0.1:10008',
      2
    ],
    [
      '127.0.0.1:10009',
      3
    ]
  ]
}
S: Setting server list to [
  [
    '127.0.0.1:10001',
    3
  ],
  [
    '127.0.0.1:10002',
    2
  ],
  [
    '127.0.0.1:10003',
    2
  ],
  [
    '127.0.0.1:10004',
    2
  ],
  [
    '127.0.0.1:10005',
    3
  ],
  [
    '127.0.0.1:10006',
    3
  ],
  '127.0.0.1:10007',
  [
    '127.0.0.1:10008',
    2
  ],
  [
    '127.0.0.1:10009',
    3
  ]
]
S: Bucket list is [
  '127.0.0.1:10001',
  '127.0.0.1:10001',
  '127.0.0.1:10001',
  '127.0.0.1:10002',
  '127.0.0.1:10002',
  '127.0.0.1:10003',
  '127.0.0.1:10003',
  '127.0.0.1:10004',
  '127.0.0.1:10004',
  '127.0.0.1:10005',
  '127.0.0.1:10005',
  '127.0.0.1:10005',
  '127.0.0.1:10006',
  '127.0.0.1:10006',
  '127.0.0.1:10006',
  '127.0.0.1:10007',
  '127.0.0.1:10008',
  '127.0.0.1:10008',
  '127.0.0.1:10009',
  '127.0.0.1:10009',
  '127.0.0.1:10009'
]
, bucket count is 21
Creating connection for 127.0.0.1:10003
Creating connection for 127.0.0.1:10007
Creating connection for 127.0.0.1:10004
Creating connection for 127.0.0.1:10002
Creating connection for 127.0.0.1:10009
Creating connection for 127.0.0.1:10006
Creating connection for 127.0.0.1:10005
Creating connection for 127.0.0.1:10008
Creating connection for 127.0.0.1:10001
C: Done creating object
S: Setting server list to [
  [
    '127.0.0.1:10001',
    3
  ],
  [
    '127.0.0.1:10002',
    2
  ],
  [
    '127.0.0.1:10003',
    2
  ],
  [
    '127.0.0.1:10004',
    2
  ],
  [
    '127.0.0.1:10005',
    3
  ],
  [
    '127.0.0.1:10006',
    3
  ],
  '127.0.0.1:10007',
  [
    '127.0.0.1:10008',
    2
  ],
  [
    '127.0.0.1:10009',
    3
  ]
]
S: Bucket list is [
  '127.0.0.1:10001',
  '127.0.0.1:10001',
  '127.0.0.1:10001',
  '127.0.0.1:10002',
  '127.0.0.1:10002',
  '127.0.0.1:10003',
  '127.0.0.1:10003',
  '127.0.0.1:10004',
  '127.0.0.1:10004',
  '127.0.0.1:10005',
  '127.0.0.1:10005',
  '127.0.0.1:10005',
  '127.0.0.1:10006',
  '127.0.0.1:10006',
  '127.0.0.1:10006',
  '127.0.0.1:10007',
  '127.0.0.1:10008',
  '127.0.0.1:10008',
  '127.0.0.1:10009',
  '127.0.0.1:10009',
  '127.0.0.1:10009'
]
, bucket count is 21
Mock cluster is bless( {
  hash_namespace => 1,
  namespace => '1288727994.11859.',
  selector => bless( {
    bucketcount => 21,
    buckets => [
      '127.0.0.1:10001',
      '127.0.0.1:10001',
      '127.0.0.1:10001',
      '127.0.0.1:10002',
      '127.0.0.1:10002',
      '127.0.0.1:10003',
      '127.0.0.1:10003',
      '127.0.0.1:10004',
      '127.0.0.1:10004',
      '127.0.0.1:10005',
      '127.0.0.1:10005',
      '127.0.0.1:10005',
      '127.0.0.1:10006',
      '127.0.0.1:10006',
      '127.0.0.1:10006',
      '127.0.0.1:10007',
      '127.0.0.1:10008',
      '127.0.0.1:10008',
      '127.0.0.1:10009',
      '127.0.0.1:10009',
      '127.0.0.1:10009'
    ]
  }, 'Memcached::Client::Selector::Traditional' ),
  servers => {
    '127.0.0.1:10001' => {},
    '127.0.0.1:10002' => {},
    '127.0.0.1:10003' => {},
    '127.0.0.1:10004' => {},
    '127.0.0.1:10005' => {},
    '127.0.0.1:10006' => {},
    '127.0.0.1:10007' => {},
    '127.0.0.1:10008' => {},
    '127.0.0.1:10009' => {}
  },
  version => '1.4.5'
}, 't::Memcached::Mock' )
Choice is #1, 127.0.0.1:10002
T: running Traditional/Text synchronous
T: ->connect is connect ([
  1
]
)
C [connect]: Starting connection
C [connect]: Connecting 127.0.0.1:10003
C [127.0.0.1:10003]: connecting to [127.0.0.1:10003]
C [127.0.0.1:10003]: preparing handle
C [connect]: Connecting 127.0.0.1:10004
C [127.0.0.1:10004]: connecting to [127.0.0.1:10004]
C [127.0.0.1:10004]: preparing handle
C [connect]: Connecting 127.0.0.1:10007
C [127.0.0.1:10007]: connecting to [127.0.0.1:10007]
C [127.0.0.1:10007]: preparing handle
C [connect]: Connecting 127.0.0.1:10002
C [127.0.0.1:10002]: connecting to [127.0.0.1:10002]
C [127.0.0.1:10002]: preparing handle
C [connect]: Connecting 127.0.0.1:10009
C [127.0.0.1:10009]: connecting to [127.0.0.1:10009]
C [127.0.0.1:10009]: preparing handle
C [connect]: Connecting 127.0.0.1:10005
C [127.0.0.1:10005]: connecting to [127.0.0.1:10005]
C [127.0.0.1:10005]: preparing handle
C [connect]: Connecting 127.0.0.1:10006
C [127.0.0.1:10006]: connecting to [127.0.0.1:10006]
C [127.0.0.1:10006]: preparing handle
C [connect]: Connecting 127.0.0.1:10008
C [127.0.0.1:10008]: connecting to [127.0.0.1:10008]
C [127.0.0.1:10008]: preparing handle
C [connect]: Connecting 127.0.0.1:10001
C [127.0.0.1:10001]: connecting to [127.0.0.1:10001]
C [127.0.0.1:10001]: preparing handle
C: using condvar
C [127.0.0.1:10001]: connected
C [connect]: Done connecting 127.0.0.1:10001
C [127.0.0.1:10001]: checking for job
C [127.0.0.1:10008]: connected
C [connect]: Done connecting 127.0.0.1:10008
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10006]: connected
C [connect]: Done connecting 127.0.0.1:10006
C [127.0.0.1:10006]: checking for job
C [127.0.0.1:10005]: connected
C [connect]: Done connecting 127.0.0.1:10005
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10009]: connected
C [connect]: Done connecting 127.0.0.1:10009
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10002]: connected
C [connect]: Done connecting 127.0.0.1:10002
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10007]: connected
C [connect]: Done connecting 127.0.0.1:10007
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10004]: connected
C [connect]: Done connecting 127.0.0.1:10004
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10003]: connected
C [connect]: Done connecting 127.0.0.1:10003
C [127.0.0.1:10003]: checking for job
T: Checking for version on all servers is version ([]
)
M: version: 127.0.0.1:10003
M: version: 127.0.0.1:10007
M: version: 127.0.0.1:10004
M: version: 127.0.0.1:10002
M: version: 127.0.0.1:10009
M: version: 127.0.0.1:10006
M: version: 127.0.0.1:10005
M: version: 127.0.0.1:10008
M: version: 127.0.0.1:10001
C [version]: enqueuing to 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: version: 127.0.0.1:10003
P [127.0.0.1:10003]: > version
C [version]: enqueuing to 127.0.0.1:10004
C [127.0.0.1:10004]: queuing request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10004]: executing
P: version: 127.0.0.1:10004
P [127.0.0.1:10004]: > version
C [version]: enqueuing to 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: version: 127.0.0.1:10007
P [127.0.0.1:10007]: > version
C [version]: enqueuing to 127.0.0.1:10002
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
P: version: 127.0.0.1:10002
P [127.0.0.1:10002]: > version
C [version]: enqueuing to 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: version: 127.0.0.1:10009
P [127.0.0.1:10009]: > version
C [version]: enqueuing to 127.0.0.1:10005
C [127.0.0.1:10005]: queuing request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10005]: executing
P: version: 127.0.0.1:10005
P [127.0.0.1:10005]: > version
C [version]: enqueuing to 127.0.0.1:10006
C [127.0.0.1:10006]: queuing request
C [127.0.0.1:10006]: checking for job
C [127.0.0.1:10006]: executing
P: version: 127.0.0.1:10006
P [127.0.0.1:10006]: > version
C [version]: enqueuing to 127.0.0.1:10008
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: version: 127.0.0.1:10008
P [127.0.0.1:10008]: > version
C [version]: enqueuing to 127.0.0.1:10001
C [127.0.0.1:10001]: queuing request
C [127.0.0.1:10001]: checking for job
C [127.0.0.1:10001]: executing
P: version: 127.0.0.1:10001
P [127.0.0.1:10001]: > version
C: using condvar
P [127.0.0.1:10001]: < VERSION 1.4.5
C [127.0.0.1:10001]: done with request
C [127.0.0.1:10001]: checking for job
P [127.0.0.1:10008]: < VERSION 1.4.5
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
P [127.0.0.1:10006]: < VERSION 1.4.5
C [127.0.0.1:10006]: done with request
C [127.0.0.1:10006]: checking for job
P [127.0.0.1:10005]: < VERSION 1.4.5
C [127.0.0.1:10005]: done with request
C [127.0.0.1:10005]: checking for job
P [127.0.0.1:10009]: < VERSION 1.4.5
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
P [127.0.0.1:10002]: < VERSION 1.4.5
C [127.0.0.1:10002]: done with request
C [127.0.0.1:10002]: checking for job
P [127.0.0.1:10007]: < VERSION 1.4.5
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
P [127.0.0.1:10004]: < VERSION 1.4.5
C [127.0.0.1:10004]: done with request
C [127.0.0.1:10004]: checking for job
P [127.0.0.1:10003]: < VERSION 1.4.5
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
T: ->set without a key is set ([]
)
C [set]: using condvar
T: ->set without a value is set ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [set]: [foo]
C [__set]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93b7ad8)] [] [Memcached::Client::Connection=HASH(0x93b7948)] [foo]
C [set]: using condvar
T: ->set with a value is set ([
  'foo',
  'bar'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: set: 127.0.0.1:10007 - 1288727994.11859.foo - bar
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [set]: [foo] [bar]
C [__set]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93b7db8)] [] [Memcached::Client::Connection=HASH(0x93b7948)] [foo] [bar]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: set: 127.0.0.1:10007 - 1288727994.11859.foo - bar
C [set]: using condvar
P [127.0.0.1:10007]: < STORED
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
T: ->set with a pre-hashed key is set ([
  [
    '37',
    'llama'
  ],
  'bar'
]
)
S: Hash value is 37, bucket # is 16, bucket value is 127.0.0.1:10008
M: set: 127.0.0.1:10008 - 1288727994.11859.llama - bar
S: Hash value is 37, bucket # is 16, bucket value is 127.0.0.1:10008
C [set]: [ARRAY(0x93ba248)] [bar]
C [__set]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93ba278)] [] [Memcached::Client::Connection=HASH(0x93b7308)] [ARRAY(0x93ba248)] [bar]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: set: 127.0.0.1:10008 - 1288727994.11859.llama - bar
C [set]: using condvar
P [127.0.0.1:10008]: < STORED
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
T: ->set_multi with various keys is set_multi ([
  [
    [
      'teatime',
      3
    ],
    [
      'bagman',
      'ludo'
    ]
  ]
]
)
S: Hash value is 23947, bucket # is 7, bucket value is 127.0.0.1:10004
M: set: 127.0.0.1:10004 - 1288727994.11859.teatime - 3
S: Hash value is 11048, bucket # is 2, bucket value is 127.0.0.1:10001
M: set: 127.0.0.1:10001 - 1288727994.11859.bagman - ludo
C: calling __set_multi - [
  [
    [
      'teatime',
      3
    ],
    [
      'bagman',
      'ludo'
    ]
  ]
]
C [__set]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x903b948)] [] [ARRAY(0x93ba2a8)]
Tuples are [
  [
    'teatime',
    3
  ],
  [
    'bagman',
    'ludo'
  ]
]
Tuple is [
  'teatime',
  3
]
S: Hash value is 23947, bucket # is 7, bucket value is 127.0.0.1:10004
C: set 127.0.0.1:10004
C [127.0.0.1:10004]: queuing request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10004]: executing
P: set: 127.0.0.1:10004 - 1288727994.11859.teatime - 3
Tuple is [
  'bagman',
  'ludo'
]
S: Hash value is 11048, bucket # is 2, bucket value is 127.0.0.1:10001
C: set 127.0.0.1:10001
C [127.0.0.1:10001]: queuing request
C [127.0.0.1:10001]: checking for job
C [127.0.0.1:10001]: executing
P: set: 127.0.0.1:10001 - 1288727994.11859.bagman - ludo
C: using condvar
P [127.0.0.1:10004]: < STORED
C [127.0.0.1:10004]: done with request
C [127.0.0.1:10004]: checking for job
P [127.0.0.1:10001]: < STORED
C [127.0.0.1:10001]: done with request
C [127.0.0.1:10001]: checking for job
T: ->add without a key is add ([]
)
C [add]: using condvar
T: ->add without a value is add ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [add]: [foo]
C [__add]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93b9968)] [] [Memcached::Client::Connection=HASH(0x93b7948)] [foo]
C [add]: using condvar
T: ->add with a value is add ([
  'bar',
  'baz'
]
)
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: add: 127.0.0.1:10008 - 1288727994.11859.bar - baz
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
C [add]: [bar] [baz]
C [__add]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93b9fc8)] [] [Memcached::Client::Connection=HASH(0x93b7308)] [bar] [baz]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: add: 127.0.0.1:10008 - 1288727994.11859.bar - baz
C [add]: using condvar
P [127.0.0.1:10008]: < STORED
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
T: ->add with an existing value is add ([
  'bar',
  'foo'
]
)
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: add: 127.0.0.1:10008 - 1288727994.11859.bar - foo
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
C [add]: [bar] [foo]
C [__add]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93b9b18)] [] [Memcached::Client::Connection=HASH(0x93b7308)] [bar] [foo]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: add: 127.0.0.1:10008 - 1288727994.11859.bar - foo
C [add]: using condvar
P [127.0.0.1:10008]: < NOT_STORED
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
T: ->set_multi with various pre-existing keys is add_multi ([
  [
    [
      'teatime',
      3
    ],
    [
      'bagman',
      'ludo'
    ]
  ]
]
)
S: Hash value is 23947, bucket # is 7, bucket value is 127.0.0.1:10004
M: add: 127.0.0.1:10004 - 1288727994.11859.teatime - 3
S: Hash value is 11048, bucket # is 2, bucket value is 127.0.0.1:10001
M: add: 127.0.0.1:10001 - 1288727994.11859.bagman - ludo
C: calling __add_multi - [
  [
    [
      'teatime',
      3
    ],
    [
      'bagman',
      'ludo'
    ]
  ]
]
C [__add]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93b9f98)] [] [ARRAY(0x93ba228)]
Tuples are [
  [
    'teatime',
    3
  ],
  [
    'bagman',
    'ludo'
  ]
]
Tuple is [
  'teatime',
  3
]
S: Hash value is 23947, bucket # is 7, bucket value is 127.0.0.1:10004
C: add 127.0.0.1:10004
C [127.0.0.1:10004]: queuing request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10004]: executing
P: add: 127.0.0.1:10004 - 1288727994.11859.teatime - 3
Tuple is [
  'bagman',
  'ludo'
]
S: Hash value is 11048, bucket # is 2, bucket value is 127.0.0.1:10001
C: add 127.0.0.1:10001
C [127.0.0.1:10001]: queuing request
C [127.0.0.1:10001]: checking for job
C [127.0.0.1:10001]: executing
P: add: 127.0.0.1:10001 - 1288727994.11859.bagman - ludo
C: using condvar
P [127.0.0.1:10001]: < NOT_STORED
C [127.0.0.1:10001]: done with request
C [127.0.0.1:10001]: checking for job
P [127.0.0.1:10004]: < NOT_STORED
C [127.0.0.1:10004]: done with request
C [127.0.0.1:10004]: checking for job
T: ->set_multi with various keys is add_multi ([
  [
    [
      'porridge',
      'salty'
    ],
    [
      'complex',
      'simple'
    ],
    [
      'bagman',
      'horace'
    ]
  ]
]
)
S: Hash value is 32061, bucket # is 15, bucket value is 127.0.0.1:10007
M: add: 127.0.0.1:10007 - 1288727994.11859.porridge - salty
S: Hash value is 14831, bucket # is 5, bucket value is 127.0.0.1:10003
M: add: 127.0.0.1:10003 - 1288727994.11859.complex - simple
S: Hash value is 11048, bucket # is 2, bucket value is 127.0.0.1:10001
M: add: 127.0.0.1:10001 - 1288727994.11859.bagman - horace
C: calling __add_multi - [
  [
    [
      'porridge',
      'salty'
    ],
    [
      'complex',
      'simple'
    ],
    [
      'bagman',
      'horace'
    ]
  ]
]
C [__add]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93ba208)] [] [ARRAY(0x93b7e68)]
Tuples are [
  [
    'porridge',
    'salty'
  ],
  [
    'complex',
    'simple'
  ],
  [
    'bagman',
    'horace'
  ]
]
Tuple is [
  'porridge',
  'salty'
]
S: Hash value is 32061, bucket # is 15, bucket value is 127.0.0.1:10007
C: add 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: add: 127.0.0.1:10007 - 1288727994.11859.porridge - salty
Tuple is [
  'complex',
  'simple'
]
S: Hash value is 14831, bucket # is 5, bucket value is 127.0.0.1:10003
C: add 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: add: 127.0.0.1:10003 - 1288727994.11859.complex - simple
Tuple is [
  'bagman',
  'horace'
]
S: Hash value is 11048, bucket # is 2, bucket value is 127.0.0.1:10001
C: add 127.0.0.1:10001
C [127.0.0.1:10001]: queuing request
C [127.0.0.1:10001]: checking for job
C [127.0.0.1:10001]: executing
P: add: 127.0.0.1:10001 - 1288727994.11859.bagman - horace
C: using condvar
P [127.0.0.1:10007]: < STORED
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
P [127.0.0.1:10001]: < NOT_STORED
C [127.0.0.1:10001]: done with request
C [127.0.0.1:10001]: checking for job
P [127.0.0.1:10003]: < STORED
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
T: ->add with a pre-hashed key is set ([
  [
    '19',
    'ding-dong'
  ],
  'bar'
]
)
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: set: 127.0.0.1:10009 - 1288727994.11859.ding-dong - bar
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [set]: [ARRAY(0x93ba378)] [bar]
C [__set]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93ba348)] [] [Memcached::Client::Connection=HASH(0x93b7748)] [ARRAY(0x93ba378)] [bar]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: set: 127.0.0.1:10009 - 1288727994.11859.ding-dong - bar
C [set]: using condvar
P [127.0.0.1:10009]: < STORED
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
T: ->get without a key is get ([]
)
C [get]: using condvar
T: ->get a non-existant value is get ([
  'bang'
]
)
S: Hash value is 11036, bucket # is 11, bucket value is 127.0.0.1:10005
M: get: 127.0.0.1:10005 - 1288727994.11859.bang
S: Hash value is 11036, bucket # is 11, bucket value is 127.0.0.1:10005
C [get]: [bang]
C [get]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93b7f08)] [] [Memcached::Client::Connection=HASH(0x93b75e8)] [bang]
C [127.0.0.1:10005]: queuing request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10005]: executing
P: get: 127.0.0.1:10005 - 1288727994.11859.bang
C [get]: using condvar
P [127.0.0.1:10005]: < END
C [127.0.0.1:10005]: done with request
C [127.0.0.1:10005]: checking for job
T: ->get an existing value is get ([
  'bar'
]
)
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727994.11859.bar
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
C [get]: [bar]
C [get]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93b9d28)] [] [Memcached::Client::Connection=HASH(0x93b7308)] [bar]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727994.11859.bar
C [get]: using condvar
P [127.0.0.1:10008]: < VALUE 1288727994.11859.bar 0 3
P [127.0.0.1:10008]: < baz
P [127.0.0.1:10008]: < 
P [127.0.0.1:10008]: < END
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727994.11859.bar' => {
    cas => undef,
    data => 'baz',
    flags => '0'
  }
}
T: ->get a value with a pre-hashed key is get ([
  [
    '19',
    'ding-dong'
  ]
]
)
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: get: 127.0.0.1:10009 - 1288727994.11859.ding-dong
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [get]: [ARRAY(0x93b72b8)]
C [get]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93b9e68)] [] [Memcached::Client::Connection=HASH(0x93b7748)] [ARRAY(0x93b72b8)]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: get: 127.0.0.1:10009 - 1288727994.11859.ding-dong
C [get]: using condvar
P [127.0.0.1:10009]: < VALUE 1288727994.11859.ding-dong 0 3
P [127.0.0.1:10009]: < bar
P [127.0.0.1:10009]: < 
P [127.0.0.1:10009]: < END
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C: get - result {
  '1288727994.11859.ding-dong' => {
    cas => undef,
    data => 'bar',
    flags => '0'
  }
}
T: ->get_multi without a list is get_multi ([]
)
C: calling __get_multi - []
C [get_multi]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93b7b28)] []
C: using condvar
T: ->get_multi with an empty list is get_multi ([
  []
]
)
C: calling __get_multi - [
  []
]
C [get_multi]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93b9ac8)] [] [ARRAY(0x93b9a28)]
C: using condvar
T: ->get with all keys set so far is get_multi ([
  [
    'bar',
    'foo',
    'porridge'
  ]
]
)
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727994.11859.bar
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: get: 127.0.0.1:10007 - 1288727994.11859.foo
S: Hash value is 32061, bucket # is 15, bucket value is 127.0.0.1:10007
M: get: 127.0.0.1:10007 - 1288727994.11859.porridge
C: calling __get_multi - [
  [
    'bar',
    'foo',
    'porridge'
  ]
]
C [get_multi]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x9031338)] [] [ARRAY(0x93b7478)]
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
S: Hash value is 32061, bucket # is 15, bucket value is 127.0.0.1:10007
C: get 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: get: 127.0.0.1:10007 - 1288727994.11859.foo
P: get: 127.0.0.1:10007 - 1288727994.11859.porridge
C: get 127.0.0.1:10008
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727994.11859.bar
C: using condvar
P [127.0.0.1:10008]: < VALUE 1288727994.11859.bar 0 3
P [127.0.0.1:10008]: < baz
P [127.0.0.1:10008]: < 
P [127.0.0.1:10008]: < END
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727994.11859.bar' => {
    cas => undef,
    data => 'baz',
    flags => '0'
  }
}
P [127.0.0.1:10007]: < VALUE 1288727994.11859.foo 0 3
P [127.0.0.1:10007]: < bar
P [127.0.0.1:10007]: < 
P [127.0.0.1:10007]: < VALUE 1288727994.11859.porridge 0 5
P [127.0.0.1:10007]: < salty
P [127.0.0.1:10007]: < 
P [127.0.0.1:10007]: < END
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C: get - result {
  '1288727994.11859.foo' => {
    cas => undef,
    data => 'bar',
    flags => '0'
  },
  '1288727994.11859.porridge' => {
    cas => undef,
    data => 'salty',
    flags => '0'
  }
}
T: ->get with all keys set so far is get_multi ([
  [
    [
      '37',
      'llama'
    ],
    'bar',
    'foo'
  ]
]
)
S: Hash value is 37, bucket # is 16, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727994.11859.llama
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727994.11859.bar
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: get: 127.0.0.1:10007 - 1288727994.11859.foo
C: calling __get_multi - [
  [
    [
      37,
      'llama'
    ],
    'bar',
    'foo'
  ]
]
C [get_multi]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93b7c98)] [] [ARRAY(0x93b7dc8)]
S: Hash value is 37, bucket # is 16, bucket value is 127.0.0.1:10008
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C: get 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: get: 127.0.0.1:10007 - 1288727994.11859.foo
C: get 127.0.0.1:10008
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727994.11859.llama
P: get: 127.0.0.1:10008 - 1288727994.11859.bar
C: using condvar
P [127.0.0.1:10008]: < VALUE 1288727994.11859.llama 0 3
P [127.0.0.1:10008]: < bar
P [127.0.0.1:10008]: < 
P [127.0.0.1:10008]: < VALUE 1288727994.11859.bar 0 3
P [127.0.0.1:10008]: < baz
P [127.0.0.1:10008]: < 
P [127.0.0.1:10008]: < END
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727994.11859.bar' => {
    cas => undef,
    data => 'baz',
    flags => '0'
  },
  '1288727994.11859.llama' => {
    cas => undef,
    data => 'bar',
    flags => '0'
  }
}
P [127.0.0.1:10007]: < VALUE 1288727994.11859.foo 0 3
P [127.0.0.1:10007]: < bar
P [127.0.0.1:10007]: < 
P [127.0.0.1:10007]: < END
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C: get - result {
  '1288727994.11859.foo' => {
    cas => undef,
    data => 'bar',
    flags => '0'
  }
}
T: ->replace without a key is replace ([]
)
C [replace]: using condvar
T: ->replace without a value is replace ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [replace]: [foo]
C [__replace]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93ba218)] [] [Memcached::Client::Connection=HASH(0x93b7948)] [foo]
C [replace]: using condvar
T: ->replace with a non-existent value is replace ([
  'baz',
  'gorp'
]
)
S: Hash value is 22675, bucket # is 16, bucket value is 127.0.0.1:10008
M: replace: 127.0.0.1:10008 - 1288727994.11859.baz - gorp
S: Hash value is 22675, bucket # is 16, bucket value is 127.0.0.1:10008
C [replace]: [baz] [gorp]
C [__replace]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93ba3f8)] [] [Memcached::Client::Connection=HASH(0x93b7308)] [baz] [gorp]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: replace: 127.0.0.1:10008 - 1288727994.11859.baz - gorp
C [replace]: using condvar
P [127.0.0.1:10008]: < NOT_STORED
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
T: ->replace with an existing value is replace ([
  'bar',
  'gondola'
]
)
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: replace: 127.0.0.1:10008 - 1288727994.11859.bar - gondola
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
C [replace]: [bar] [gondola]
C [__replace]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93b9c68)] [] [Memcached::Client::Connection=HASH(0x93b7308)] [bar] [gondola]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: replace: 127.0.0.1:10008 - 1288727994.11859.bar - gondola
C [replace]: using condvar
P [127.0.0.1:10008]: < STORED
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
T: ->replace_multi with various keys is replace_multi ([
  [
    [
      'porridge',
      'sweet'
    ],
    [
      'complex',
      'NP'
    ],
    [
      'ludo',
      'panopticon'
    ]
  ]
]
)
S: Hash value is 32061, bucket # is 15, bucket value is 127.0.0.1:10007
M: replace: 127.0.0.1:10007 - 1288727994.11859.porridge - sweet
S: Hash value is 14831, bucket # is 5, bucket value is 127.0.0.1:10003
M: replace: 127.0.0.1:10003 - 1288727994.11859.complex - NP
S: Hash value is 9432, bucket # is 3, bucket value is 127.0.0.1:10002
M: replace: 127.0.0.1:10002 - 1288727994.11859.ludo - panopticon
C: calling __replace_multi - [
  [
    [
      'porridge',
      'sweet'
    ],
    [
      'complex',
      'NP'
    ],
    [
      'ludo',
      'panopticon'
    ]
  ]
]
C [__replace]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x903ee38)] [] [ARRAY(0x93ba4b8)]
Tuples are [
  [
    'porridge',
    'sweet'
  ],
  [
    'complex',
    'NP'
  ],
  [
    'ludo',
    'panopticon'
  ]
]
Tuple is [
  'porridge',
  'sweet'
]
S: Hash value is 32061, bucket # is 15, bucket value is 127.0.0.1:10007
C: replace 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: replace: 127.0.0.1:10007 - 1288727994.11859.porridge - sweet
Tuple is [
  'complex',
  'NP'
]
S: Hash value is 14831, bucket # is 5, bucket value is 127.0.0.1:10003
C: replace 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: replace: 127.0.0.1:10003 - 1288727994.11859.complex - NP
Tuple is [
  'ludo',
  'panopticon'
]
S: Hash value is 9432, bucket # is 3, bucket value is 127.0.0.1:10002
C: replace 127.0.0.1:10002
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
P: replace: 127.0.0.1:10002 - 1288727994.11859.ludo - panopticon
C: using condvar
P [127.0.0.1:10003]: < STORED
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
P [127.0.0.1:10007]: < STORED
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
P [127.0.0.1:10002]: < NOT_STORED
C [127.0.0.1:10002]: done with request
C [127.0.0.1:10002]: checking for job
T: ->get to verify replacement is get ([
  'bar'
]
)
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727994.11859.bar
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
C [get]: [bar]
C [get]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93ba5a8)] [] [Memcached::Client::Connection=HASH(0x93b7308)] [bar]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727994.11859.bar
C [get]: using condvar
P [127.0.0.1:10008]: < VALUE 1288727994.11859.bar 0 7
P [127.0.0.1:10008]: < gondola
P [127.0.0.1:10008]: < 
P [127.0.0.1:10008]: < END
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727994.11859.bar' => {
    cas => undef,
    data => 'gondola',
    flags => '0'
  }
}
T: ->get a key that is too large and does not exist is get ([
  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
]
)
S: Hash value is 26803, bucket # is 7, bucket value is 127.0.0.1:10004
M: get: 127.0.0.1:10004 - 1288727994.11859.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
C [get]: using condvar
T: ->set a key that is too large and does not exist is set ([
  'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb',
  'lurch'
]
)
S: Hash value is 23903, bucket # is 5, bucket value is 127.0.0.1:10003
M: set: 127.0.0.1:10003 - 1288727994.11859.bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb - lurch
C [set]: using condvar
T: ->replace with a pre-hashed key and non-existent value is replace ([
  [
    '18',
    'ding-dong'
  ],
  'bar'
]
)
S: Hash value is 18, bucket # is 18, bucket value is 127.0.0.1:10009
M: replace: 127.0.0.1:10009 - 1288727994.11859.ding-dong - bar
S: Hash value is 18, bucket # is 18, bucket value is 127.0.0.1:10009
C [replace]: [ARRAY(0x93ba6d8)] [bar]
C [__replace]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93ba6b8)] [] [Memcached::Client::Connection=HASH(0x93b7748)] [ARRAY(0x93ba6d8)] [bar]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: replace: 127.0.0.1:10009 - 1288727994.11859.ding-dong - bar
C [replace]: using condvar
P [127.0.0.1:10009]: < STORED
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
T: ->replace with a pre-hashed key and an existing value is replace ([
  [
    '19',
    'ding-dong'
  ],
  'baz'
]
)
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: replace: 127.0.0.1:10009 - 1288727994.11859.ding-dong - baz
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [replace]: [ARRAY(0x93ba768)] [baz]
C [__replace]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93ba748)] [] [Memcached::Client::Connection=HASH(0x93b7748)] [ARRAY(0x93ba768)] [baz]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: replace: 127.0.0.1:10009 - 1288727994.11859.ding-dong - baz
C [replace]: using condvar
P [127.0.0.1:10009]: < STORED
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
T: ->get a value with a pre-hashed key is get ([
  [
    '19',
    'ding-dong'
  ]
]
)
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: get: 127.0.0.1:10009 - 1288727994.11859.ding-dong
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [get]: [ARRAY(0x93ba7f8)]
C [get]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93ba7c8)] [] [Memcached::Client::Connection=HASH(0x93b7748)] [ARRAY(0x93ba7f8)]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: get: 127.0.0.1:10009 - 1288727994.11859.ding-dong
C [get]: using condvar
P [127.0.0.1:10009]: < VALUE 1288727994.11859.ding-dong 0 3
P [127.0.0.1:10009]: < baz
P [127.0.0.1:10009]: < 
P [127.0.0.1:10009]: < END
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C: get - result {
  '1288727994.11859.ding-dong' => {
    cas => undef,
    data => 'baz',
    flags => '0'
  }
}
T: ->append without a key is append ([]
)
C [append]: using condvar
T: ->append without a value is append ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [append]: [foo]
C [__append]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c5c78)] [] [Memcached::Client::Connection=HASH(0x93b7948)] [foo]
C [append]: using condvar
T: ->append with a non-existent value is append ([
  'baz',
  'gorp'
]
)
S: Hash value is 22675, bucket # is 16, bucket value is 127.0.0.1:10008
M: append: 127.0.0.1:10008 - 1288727994.11859.baz - gorp
S: Hash value is 22675, bucket # is 16, bucket value is 127.0.0.1:10008
C [append]: [baz] [gorp]
C [__append]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c5cd8)] [] [Memcached::Client::Connection=HASH(0x93b7308)] [baz] [gorp]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: append: 127.0.0.1:10008 - 1288727994.11859.baz - gorp
C [append]: using condvar
P [127.0.0.1:10008]: < NOT_STORED
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
T: ->append with an existing value is append ([
  'bar',
  'gorp'
]
)
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: append: 127.0.0.1:10008 - 1288727994.11859.bar - gorp
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
C [append]: [bar] [gorp]
C [__append]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c5d38)] [] [Memcached::Client::Connection=HASH(0x93b7308)] [bar] [gorp]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: append: 127.0.0.1:10008 - 1288727994.11859.bar - gorp
C [append]: using condvar
P [127.0.0.1:10008]: < STORED
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
T: ->append_multi with various keys is append_multi ([
  [
    [
      'porridge',
      ' and salty'
    ],
    [
      'complex',
      ' != P'
    ]
  ]
]
)
S: Hash value is 32061, bucket # is 15, bucket value is 127.0.0.1:10007
M: append: 127.0.0.1:10007 - 1288727994.11859.porridge -  and salty
S: Hash value is 14831, bucket # is 5, bucket value is 127.0.0.1:10003
M: append: 127.0.0.1:10003 - 1288727994.11859.complex -  != P
C: calling __append_multi - [
  [
    [
      'porridge',
      ' and salty'
    ],
    [
      'complex',
      ' != P'
    ]
  ]
]
C [__append]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c60b0)] [] [ARRAY(0x93c5db8)]
Tuples are [
  [
    'porridge',
    ' and salty'
  ],
  [
    'complex',
    ' != P'
  ]
]
Tuple is [
  'porridge',
  ' and salty'
]
S: Hash value is 32061, bucket # is 15, bucket value is 127.0.0.1:10007
C: append 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: append: 127.0.0.1:10007 - 1288727994.11859.porridge -  and salty
Tuple is [
  'complex',
  ' != P'
]
S: Hash value is 14831, bucket # is 5, bucket value is 127.0.0.1:10003
C: append 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: append: 127.0.0.1:10003 - 1288727994.11859.complex -  != P
C: using condvar
P [127.0.0.1:10003]: < STORED
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
P [127.0.0.1:10007]: < STORED
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
T: ->get to verify ->append is get ([
  'bar'
]
)
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727994.11859.bar
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
C [get]: [bar]
C [get]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c60d0)] [] [Memcached::Client::Connection=HASH(0x93b7308)] [bar]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727994.11859.bar
C [get]: using condvar
P [127.0.0.1:10008]: < VALUE 1288727994.11859.bar 0 11
P [127.0.0.1:10008]: < gondolagorp
P [127.0.0.1:10008]: < 
P [127.0.0.1:10008]: < END
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727994.11859.bar' => {
    cas => undef,
    data => 'gondolagorp',
    flags => '0'
  }
}
T: ->append with a pre-hashed key and non-existent value is append ([
  [
    '18',
    'ding-dong'
  ],
  'flagon'
]
)
S: Hash value is 18, bucket # is 18, bucket value is 127.0.0.1:10009
M: append: 127.0.0.1:10009 - 1288727994.11859.ding-dong - flagon
S: Hash value is 18, bucket # is 18, bucket value is 127.0.0.1:10009
C [append]: [ARRAY(0x93c6150)] [flagon]
C [__append]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c6130)] [] [Memcached::Client::Connection=HASH(0x93b7748)] [ARRAY(0x93c6150)] [flagon]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: append: 127.0.0.1:10009 - 1288727994.11859.ding-dong - flagon
C [append]: using condvar
P [127.0.0.1:10009]: < STORED
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
T: ->append with a pre-hashed key and an existing value is append ([
  [
    '19',
    'ding-dong'
  ],
  'flagged'
]
)
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: append: 127.0.0.1:10009 - 1288727994.11859.ding-dong - flagged
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [append]: [ARRAY(0x93c61e0)] [flagged]
C [__append]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c61c0)] [] [Memcached::Client::Connection=HASH(0x93b7748)] [ARRAY(0x93c61e0)] [flagged]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: append: 127.0.0.1:10009 - 1288727994.11859.ding-dong - flagged
C [append]: using condvar
P [127.0.0.1:10009]: < STORED
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
T: ->get a value with a pre-hashed key is get ([
  [
    '19',
    'ding-dong'
  ]
]
)
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: get: 127.0.0.1:10009 - 1288727994.11859.ding-dong
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [get]: [ARRAY(0x93c6270)]
C [get]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c6240)] [] [Memcached::Client::Connection=HASH(0x93b7748)] [ARRAY(0x93c6270)]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: get: 127.0.0.1:10009 - 1288727994.11859.ding-dong
C [get]: using condvar
P [127.0.0.1:10009]: < VALUE 1288727994.11859.ding-dong 0 16
P [127.0.0.1:10009]: < bazflagonflagged
P [127.0.0.1:10009]: < 
P [127.0.0.1:10009]: < END
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C: get - result {
  '1288727994.11859.ding-dong' => {
    cas => undef,
    data => 'bazflagonflagged',
    flags => '0'
  }
}
T: ->prepend without a key is prepend ([]
)
C [prepend]: using condvar
T: ->prepend without a value is prepend ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [prepend]: [foo]
C [__prepend]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c6300)] [] [Memcached::Client::Connection=HASH(0x93b7948)] [foo]
C [prepend]: using condvar
T: ->prepend with a non-existent value is prepend ([
  'baz',
  'gorp'
]
)
S: Hash value is 22675, bucket # is 16, bucket value is 127.0.0.1:10008
M: prepend: 127.0.0.1:10008 - 1288727994.11859.baz - gorp
S: Hash value is 22675, bucket # is 16, bucket value is 127.0.0.1:10008
C [prepend]: [baz] [gorp]
C [__prepend]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c6360)] [] [Memcached::Client::Connection=HASH(0x93b7308)] [baz] [gorp]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: prepend: 127.0.0.1:10008 - 1288727994.11859.baz - gorp
C [prepend]: using condvar
P [127.0.0.1:10008]: < NOT_STORED
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
T: ->prepend with an existing value is prepend ([
  'foo',
  'gorp'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: prepend: 127.0.0.1:10007 - 1288727994.11859.foo - gorp
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [prepend]: [foo] [gorp]
C [__prepend]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c63c0)] [] [Memcached::Client::Connection=HASH(0x93b7948)] [foo] [gorp]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: prepend: 127.0.0.1:10007 - 1288727994.11859.foo - gorp
C [prepend]: using condvar
P [127.0.0.1:10007]: < STORED
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
T: ->prepend_multi with various keys is prepend_multi ([
  [
    [
      'porridge',
      'We love '
    ]
  ]
]
)
S: Hash value is 32061, bucket # is 15, bucket value is 127.0.0.1:10007
M: prepend: 127.0.0.1:10007 - 1288727994.11859.porridge - We love 
C: calling __prepend_multi - [
  [
    [
      'porridge',
      'We love '
    ]
  ]
]
C [__prepend]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c6430)] [] [ARRAY(0x93c6440)]
Tuples are [
  [
    'porridge',
    'We love '
  ]
]
Tuple is [
  'porridge',
  'We love '
]
S: Hash value is 32061, bucket # is 15, bucket value is 127.0.0.1:10007
C: prepend 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: prepend: 127.0.0.1:10007 - 1288727994.11859.porridge - We love 
C: using condvar
P [127.0.0.1:10007]: < STORED
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
T: ->get to verify ->prepend is get ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: get: 127.0.0.1:10007 - 1288727994.11859.foo
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [get]: [foo]
C [get]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c8028)] [] [Memcached::Client::Connection=HASH(0x93b7948)] [foo]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: get: 127.0.0.1:10007 - 1288727994.11859.foo
C [get]: using condvar
P [127.0.0.1:10007]: < VALUE 1288727994.11859.foo 0 7
P [127.0.0.1:10007]: < gorpbar
P [127.0.0.1:10007]: < 
P [127.0.0.1:10007]: < END
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C: get - result {
  '1288727994.11859.foo' => {
    cas => undef,
    data => 'gorpbar',
    flags => '0'
  }
}
T: ->delete without a key is delete ([]
)
C [delete]: using condvar
T: ->delete with a non-existent key is delete ([
  'bang'
]
)
S: Hash value is 11036, bucket # is 11, bucket value is 127.0.0.1:10005
M: delete: 127.0.0.1:10005 - 1288727994.11859.bang
S: Hash value is 11036, bucket # is 11, bucket value is 127.0.0.1:10005
C [delete]: [bang]
C [delete]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c80b8)] [] [Memcached::Client::Connection=HASH(0x93b75e8)] [bang]
C [127.0.0.1:10005]: queuing request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10005]: executing
P: delete: 127.0.0.1:10005 - 1288727994.11859.bang
P [127.0.0.1:10005]: > delete 1288727994.11859.bang
C [delete]: using condvar
P [127.0.0.1:10005]: < NOT_FOUND
C [127.0.0.1:10005]: done with request
C [127.0.0.1:10005]: checking for job
T: ->delete with an existing key is delete ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: delete: 127.0.0.1:10007 - 1288727994.11859.foo
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [delete]: [foo]
C [delete]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c8c78)] [] [Memcached::Client::Connection=HASH(0x93b7948)] [foo]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: delete: 127.0.0.1:10007 - 1288727994.11859.foo
P [127.0.0.1:10007]: > delete 1288727994.11859.foo
C [delete]: using condvar
P [127.0.0.1:10007]: < DELETED
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
T: ->delete_multi with various keys is delete_multi ([
  'complex',
  'panopticon'
]
)
S: Hash value is 14831, bucket # is 5, bucket value is 127.0.0.1:10003
M: delete: 127.0.0.1:10003 - 1288727994.11859.complex
S: Hash value is 13249, bucket # is 19, bucket value is 127.0.0.1:10009
M: delete: 127.0.0.1:10009 - 1288727994.11859.panopticon
C: calling __delete_multi - [
  'complex',
  'panopticon'
]
C [delete_multi]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c8188)] [] [complex] [panopticon]
Keys are [
  'complex',
  'panopticon'
]
S: Hash value is 14831, bucket # is 5, bucket value is 127.0.0.1:10003
key is complex
C: delete_multi 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: delete: 127.0.0.1:10003 - 1288727994.11859.complex
P [127.0.0.1:10003]: > delete 1288727994.11859.complex
S: Hash value is 13249, bucket # is 19, bucket value is 127.0.0.1:10009
key is panopticon
C: delete_multi 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: delete: 127.0.0.1:10009 - 1288727994.11859.panopticon
P [127.0.0.1:10009]: > delete 1288727994.11859.panopticon
C: using condvar
P [127.0.0.1:10009]: < NOT_FOUND
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
P [127.0.0.1:10003]: < DELETED
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
T: ->get to verify ->delete is get ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: get: 127.0.0.1:10007 - 1288727994.11859.foo
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [get]: [foo]
C [get]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c81b8)] [] [Memcached::Client::Connection=HASH(0x93b7948)] [foo]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: get: 127.0.0.1:10007 - 1288727994.11859.foo
C [get]: using condvar
P [127.0.0.1:10007]: < END
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
T: ->add with a value is add ([
  'foo',
  '1'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: add: 127.0.0.1:10007 - 1288727994.11859.foo - 1
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [add]: [foo] [1]
C [__add]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c8228)] [] [Memcached::Client::Connection=HASH(0x93b7948)] [foo] [1]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: add: 127.0.0.1:10007 - 1288727994.11859.foo - 1
C [add]: using condvar
P [127.0.0.1:10007]: < STORED
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
T: ->get to verify ->add is get ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: get: 127.0.0.1:10007 - 1288727994.11859.foo
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [get]: [foo]
C [get]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c8268)] [] [Memcached::Client::Connection=HASH(0x93b7948)] [foo]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: get: 127.0.0.1:10007 - 1288727994.11859.foo
C [get]: using condvar
P [127.0.0.1:10007]: < VALUE 1288727994.11859.foo 0 1
P [127.0.0.1:10007]: < 1
P [127.0.0.1:10007]: < 
P [127.0.0.1:10007]: < END
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C: get - result {
  '1288727994.11859.foo' => {
    cas => undef,
    data => '1',
    flags => '0'
  }
}
T: ->incr without a key is incr ([]
)
C [incr]: using condvar
Failing 127.0.0.1:10002
Deleted 127.0.0.1:10002, result bless( {
  hash_namespace => 1,
  namespace => '1288727994.11859.',
  selector => bless( {
    bucketcount => 21,
    buckets => [
      '127.0.0.1:10001',
      '127.0.0.1:10001',
      '127.0.0.1:10001',
      '127.0.0.1:10002',
      '127.0.0.1:10002',
      '127.0.0.1:10003',
      '127.0.0.1:10003',
      '127.0.0.1:10004',
      '127.0.0.1:10004',
      '127.0.0.1:10005',
      '127.0.0.1:10005',
      '127.0.0.1:10005',
      '127.0.0.1:10006',
      '127.0.0.1:10006',
      '127.0.0.1:10006',
      '127.0.0.1:10007',
      '127.0.0.1:10008',
      '127.0.0.1:10008',
      '127.0.0.1:10009',
      '127.0.0.1:10009',
      '127.0.0.1:10009'
    ]
  }, 'Memcached::Client::Selector::Traditional' ),
  servers => {
    '127.0.0.1:10001' => {
      '1288727994.11859.bagman' => 'ludo'
    },
    '127.0.0.1:10003' => {},
    '127.0.0.1:10004' => {
      '1288727994.11859.teatime' => 3
    },
    '127.0.0.1:10005' => {},
    '127.0.0.1:10006' => {},
    '127.0.0.1:10007' => {
      '1288727994.11859.foo' => '1',
      '1288727994.11859.porridge' => 'We love sweet and salty'
    },
    '127.0.0.1:10008' => {
      '1288727994.11859.bar' => 'gondolagorp',
      '1288727994.11859.llama' => 'bar'
    },
    '127.0.0.1:10009' => {
      '1288727994.11859.ding-dong' => 'bazflagonflagged'
    }
  },
  version => '1.4.5'
}, 't::Memcached::Mock' )
Pid is 11873
Trying TERM
Waitpid returned 11873
T: ->incr with a non-existent key is incr ([
  'bang'
]
)
S: Hash value is 11036, bucket # is 11, bucket value is 127.0.0.1:10005
M: incr: 127.0.0.1:10005 - 1288727994.11859.bang - 1
S: Hash value is 11036, bucket # is 11, bucket value is 127.0.0.1:10005
C [incr]: [bang]
C [__incr]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c8308)] [] [Memcached::Client::Connection=HASH(0x93b75e8)] [bang]
C [127.0.0.1:10005]: queuing request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10005]: executing
P: incr: 127.0.0.1:10005 - 1288727994.11859.bang - 1
P [127.0.0.1:10005]: > incr 1288727994.11859.bang 1
C [incr]: using condvar
P [127.0.0.1:10005]: < NOT_FOUND
C [127.0.0.1:10005]: done with request
C [127.0.0.1:10005]: checking for job
T: ->incr with an existing key is incr ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: incr: 127.0.0.1:10007 - 1288727994.11859.foo - 1
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [incr]: [foo]
C [__incr]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c8348)] [] [Memcached::Client::Connection=HASH(0x93b7948)] [foo]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: incr: 127.0.0.1:10007 - 1288727994.11859.foo - 1
P [127.0.0.1:10007]: > incr 1288727994.11859.foo 1
C [incr]: using condvar
P [127.0.0.1:10007]: < 2
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
T: ->incr with an existing key and an amount is incr ([
  'foo',
  '72'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: incr: 127.0.0.1:10007 - 1288727994.11859.foo - 72
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [incr]: [foo] [72]
C [__incr]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c83a8)] [] [Memcached::Client::Connection=HASH(0x93b7948)] [foo] [72]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: incr: 127.0.0.1:10007 - 1288727994.11859.foo - 72
P [127.0.0.1:10007]: > incr 1288727994.11859.foo 72
C [incr]: using condvar
P [127.0.0.1:10007]: < 74
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
T: ->get to verify ->incr is get ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: get: 127.0.0.1:10007 - 1288727994.11859.foo
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [get]: [foo]
C [get]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c83f8)] [] [Memcached::Client::Connection=HASH(0x93b7948)] [foo]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: get: 127.0.0.1:10007 - 1288727994.11859.foo
C [get]: using condvar
P [127.0.0.1:10007]: < VALUE 1288727994.11859.foo 0 2
P [127.0.0.1:10007]: < 74
P [127.0.0.1:10007]: < 
P [127.0.0.1:10007]: < END
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C: get - result {
  '1288727994.11859.foo' => {
    cas => undef,
    data => '74',
    flags => '0'
  }
}
T: ->decr without a key is decr ([]
)
C [decr]: using condvar
T: ->decr with a non-existent key is decr ([
  'bang'
]
)
S: Hash value is 11036, bucket # is 11, bucket value is 127.0.0.1:10005
M: decr: 127.0.0.1:10005 - 1288727994.11859.bang - 1
S: Hash value is 11036, bucket # is 11, bucket value is 127.0.0.1:10005
C [decr]: [bang]
C [__decr]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c8488)] [] [Memcached::Client::Connection=HASH(0x93b75e8)] [bang]
C [127.0.0.1:10005]: queuing request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10005]: executing
P: decr: 127.0.0.1:10005 - 1288727994.11859.bang - 1
P [127.0.0.1:10005]: > decr 1288727994.11859.bang 1
C [decr]: using condvar
P [127.0.0.1:10005]: < NOT_FOUND
C [127.0.0.1:10005]: done with request
C [127.0.0.1:10005]: checking for job
T: ->decr with an existing key is decr ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: decr: 127.0.0.1:10007 - 1288727994.11859.foo - 1
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [decr]: [foo]
C [__decr]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c84d8)] [] [Memcached::Client::Connection=HASH(0x93b7948)] [foo]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: decr: 127.0.0.1:10007 - 1288727994.11859.foo - 1
P [127.0.0.1:10007]: > decr 1288727994.11859.foo 1
C [decr]: using condvar
P [127.0.0.1:10007]: < 73
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
T: ->decr with an existing key is decr ([
  'foo',
  18
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: decr: 127.0.0.1:10007 - 1288727994.11859.foo - 18
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [decr]: [foo] [18]
C [__decr]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c8538)] [] [Memcached::Client::Connection=HASH(0x93b7948)] [foo] [18]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: decr: 127.0.0.1:10007 - 1288727994.11859.foo - 18
P [127.0.0.1:10007]: > decr 1288727994.11859.foo 18
C [decr]: using condvar
P [127.0.0.1:10007]: < 55
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
T: ->get to verify ->decr is get ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: get: 127.0.0.1:10007 - 1288727994.11859.foo
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [get]: [foo]
C [get]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c8588)] [] [Memcached::Client::Connection=HASH(0x93b7948)] [foo]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: get: 127.0.0.1:10007 - 1288727994.11859.foo
C [get]: using condvar
P [127.0.0.1:10007]: < VALUE 1288727994.11859.foo 0 2
P [127.0.0.1:10007]: < 55
P [127.0.0.1:10007]: < 
P [127.0.0.1:10007]: < END
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C: get - result {
  '1288727994.11859.foo' => {
    cas => undef,
    data => '55',
    flags => '0'
  }
}
T: ->get with all keys set so far is get_multi ([
  [
    'bar',
    'foo'
  ]
]
)
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727994.11859.bar
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: get: 127.0.0.1:10007 - 1288727994.11859.foo
C: calling __get_multi - [
  [
    'bar',
    'foo'
  ]
]
C [get_multi]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c8638)] [] [ARRAY(0x93c8608)]
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C: get 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: get: 127.0.0.1:10007 - 1288727994.11859.foo
C: get 127.0.0.1:10008
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727994.11859.bar
C: using condvar
P [127.0.0.1:10008]: < VALUE 1288727994.11859.bar 0 11
P [127.0.0.1:10008]: < gondolagorp
P [127.0.0.1:10008]: < 
P [127.0.0.1:10008]: < END
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727994.11859.bar' => {
    cas => undef,
    data => 'gondolagorp',
    flags => '0'
  }
}
P [127.0.0.1:10007]: < VALUE 1288727994.11859.foo 0 2
P [127.0.0.1:10007]: < 55
P [127.0.0.1:10007]: < 
P [127.0.0.1:10007]: < END
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C: get - result {
  '1288727994.11859.foo' => {
    cas => undef,
    data => '55',
    flags => '0'
  }
}
T: ->incr_multi with various keys is incr_multi ([
  [
    [
      'foo'
    ]
  ]
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: incr: 127.0.0.1:10007 - 1288727994.11859.foo - 1
C: calling __incr_multi - [
  [
    [
      'foo'
    ]
  ]
]
C [__incr]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c8678)] [] [ARRAY(0x93c8688)]
Begin on command CV to establish callback
Tuples are [
  [
    'foo'
  ]
]
Tuple is [
  'foo'
]
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
keys is foo, server is 127.0.0.1:10007
C: incr 127.0.0.1:10007
Begin on command CV before enqueue
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: incr: 127.0.0.1:10007 - 1288727994.11859.foo - 1
P [127.0.0.1:10007]: > incr 1288727994.11859.foo 1
End on command CV 
C: using condvar
P [127.0.0.1:10007]: < 56
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
End on command CV from server CV
T: ->incr_multi with various keys is incr_multi ([
  [
    [
      'braga',
      1,
      17
    ],
    [
      'foo',
      7
    ]
  ]
]
)
S: Hash value is 19170, bucket # is 18, bucket value is 127.0.0.1:10009
M: incr: 127.0.0.1:10009 - 1288727994.11859.braga - 1
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: incr: 127.0.0.1:10007 - 1288727994.11859.foo - 7
C: calling __incr_multi - [
  [
    [
      'braga',
      1,
      17
    ],
    [
      'foo',
      7
    ]
  ]
]
C [__incr]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c8698)] [] [ARRAY(0x93c8718)]
Begin on command CV to establish callback
Tuples are [
  [
    'braga',
    1,
    17
  ],
  [
    'foo',
    7
  ]
]
Tuple is [
  'braga',
  1,
  17
]
S: Hash value is 19170, bucket # is 18, bucket value is 127.0.0.1:10009
keys is braga, server is 127.0.0.1:10009
C: incr 127.0.0.1:10009
Begin on command CV before enqueue
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: incr: 127.0.0.1:10009 - 1288727994.11859.braga - 1
P [127.0.0.1:10009]: > incr 1288727994.11859.braga 1
Tuple is [
  'foo',
  7
]
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
keys is foo, server is 127.0.0.1:10007
C: incr 127.0.0.1:10007
Begin on command CV before enqueue
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: incr: 127.0.0.1:10007 - 1288727994.11859.foo - 7
P [127.0.0.1:10007]: > incr 1288727994.11859.foo 7
End on command CV 
C: using condvar
P [127.0.0.1:10009]: < NOT_FOUND
P [127.0.0.1:10009]: > add 1288727994.11859.braga 0 0 2
17
P [127.0.0.1:10007]: < 63
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
End on command CV from server CV
P [127.0.0.1:10009]: < STORED
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
End on command CV from server CV
T: ->decr_multi with various keys is decr_multi ([
  [
    [
      'braga',
      3
    ],
    [
      'bartinate',
      7,
      33
    ]
  ]
]
)
S: Hash value is 19170, bucket # is 18, bucket value is 127.0.0.1:10009
M: decr: 127.0.0.1:10009 - 1288727994.11859.braga - 3
S: Hash value is 23207, bucket # is 2, bucket value is 127.0.0.1:10001
M: decr: 127.0.0.1:10001 - 1288727994.11859.bartinate - 7
C: calling __decr_multi - [
  [
    [
      'braga',
      3
    ],
    [
      'bartinate',
      7,
      33
    ]
  ]
]
C [__decr]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c8728)] [] [ARRAY(0x93c8808)]
Begin on command CV to establish callback
Tuples are [
  [
    'braga',
    3
  ],
  [
    'bartinate',
    7,
    33
  ]
]
Tuple is [
  'braga',
  3
]
S: Hash value is 19170, bucket # is 18, bucket value is 127.0.0.1:10009
keys is braga, server is 127.0.0.1:10009
C: decr 127.0.0.1:10009
Begin on command CV before enqueue
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: decr: 127.0.0.1:10009 - 1288727994.11859.braga - 3
P [127.0.0.1:10009]: > decr 1288727994.11859.braga 3
Tuple is [
  'bartinate',
  7,
  33
]
S: Hash value is 23207, bucket # is 2, bucket value is 127.0.0.1:10001
keys is bartinate, server is 127.0.0.1:10001
C: decr 127.0.0.1:10001
Begin on command CV before enqueue
C [127.0.0.1:10001]: queuing request
C [127.0.0.1:10001]: checking for job
C [127.0.0.1:10001]: executing
P: decr: 127.0.0.1:10001 - 1288727994.11859.bartinate - 7
P [127.0.0.1:10001]: > decr 1288727994.11859.bartinate 7
End on command CV 
C: using condvar
P [127.0.0.1:10009]: < 14
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
End on command CV from server CV
P [127.0.0.1:10001]: < NOT_FOUND
P [127.0.0.1:10001]: > add 1288727994.11859.bartinate 0 0 2
33
P [127.0.0.1:10001]: < STORED
C [127.0.0.1:10001]: done with request
C [127.0.0.1:10001]: checking for job
End on command CV from server CV
T: ->flush_all to clear servers is flush_all ([]
)
M: flush_all: 127.0.0.1:10003
M: flush_all: 127.0.0.1:10007
M: flush_all: 127.0.0.1:10004
M: flush_all: 127.0.0.1:10009
M: flush_all: 127.0.0.1:10006
M: flush_all: 127.0.0.1:10005
M: flush_all: 127.0.0.1:10008
M: flush_all: 127.0.0.1:10001
C [flush_all]: enqueuing to 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: flush_all: 127.0.0.1:10003
P [127.0.0.1:10003]: > flush_all
C [flush_all]: enqueuing to 127.0.0.1:10004
C [127.0.0.1:10004]: queuing request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10004]: executing
P: flush_all: 127.0.0.1:10004
P [127.0.0.1:10004]: > flush_all
C [flush_all]: enqueuing to 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: flush_all: 127.0.0.1:10007
P [127.0.0.1:10007]: > flush_all
C [flush_all]: enqueuing to 127.0.0.1:10002
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
P: flush_all: 127.0.0.1:10002
P [127.0.0.1:10002]: > flush_all
C [flush_all]: enqueuing to 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: flush_all: 127.0.0.1:10009
P [127.0.0.1:10009]: > flush_all
C [flush_all]: enqueuing to 127.0.0.1:10005
C [127.0.0.1:10005]: queuing request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10005]: executing
P: flush_all: 127.0.0.1:10005
P [127.0.0.1:10005]: > flush_all
C [flush_all]: enqueuing to 127.0.0.1:10006
C [127.0.0.1:10006]: queuing request
C [127.0.0.1:10006]: checking for job
C [127.0.0.1:10006]: executing
P: flush_all: 127.0.0.1:10006
P [127.0.0.1:10006]: > flush_all
C [flush_all]: enqueuing to 127.0.0.1:10008
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: flush_all: 127.0.0.1:10008
P [127.0.0.1:10008]: > flush_all
C [flush_all]: enqueuing to 127.0.0.1:10001
C [127.0.0.1:10001]: queuing request
C [127.0.0.1:10001]: checking for job
C [127.0.0.1:10001]: executing
P: flush_all: 127.0.0.1:10001
P [127.0.0.1:10001]: > flush_all
C: using condvar
C [127.0.0.1:10002]: fatal error Broken pipe
C [connect]: Done connecting 127.0.0.1:10002
C [127.0.0.1:10002]: failing requests
C [127.0.0.1:10002]: failing request {
  failback => sub { "DUMMY" },
  request => sub { "DUMMY" }
}
P [127.0.0.1:10008]: < OK
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
P [127.0.0.1:10006]: < OK
C [127.0.0.1:10006]: done with request
C [127.0.0.1:10006]: checking for job
P [127.0.0.1:10005]: < OK
C [127.0.0.1:10005]: done with request
C [127.0.0.1:10005]: checking for job
P [127.0.0.1:10009]: < OK
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
P [127.0.0.1:10007]: < OK
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
P [127.0.0.1:10004]: < OK
C [127.0.0.1:10004]: done with request
C [127.0.0.1:10004]: checking for job
P [127.0.0.1:10003]: < OK
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
P [127.0.0.1:10001]: < OK
C [127.0.0.1:10001]: done with request
C [127.0.0.1:10001]: checking for job
T: ->get with all keys set so far is get_multi ([
  [
    'bar',
    'foo'
  ]
]
)
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727994.11859.bar
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: get: 127.0.0.1:10007 - 1288727994.11859.foo
C: calling __get_multi - [
  [
    'bar',
    'foo'
  ]
]
C [get_multi]: [Memcached::Client=HASH(0x92087b8)] [AnyEvent::CondVar=HASH(0x93c8918)] [] [ARRAY(0x93c8938)]
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C: get 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: get: 127.0.0.1:10007 - 1288727994.11859.foo
C: get 127.0.0.1:10008
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727994.11859.bar
C: using condvar
P [127.0.0.1:10008]: < END
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
P [127.0.0.1:10007]: < END
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
Done with Traditional/Text sync
Checking port 10002 for existing process
Using port 10002
Fork successful, pid 11916
Checking 127.0.0.1:10002
running Traditional/Binary sync
C: new - {
  namespace => '1288727994.11859.',
  protocol => 'Binary',
  selector => 'Traditional',
  servers => [
    [
      '127.0.0.1:10001',
      3
    ],
    [
      '127.0.0.1:10002',
      2
    ],
    [
      '127.0.0.1:10003',
      2
    ],
    [
      '127.0.0.1:10004',
      2
    ],
    [
      '127.0.0.1:10005',
      3
    ],
    [
      '127.0.0.1:10006',
      3
    ],
    '127.0.0.1:10007',
    [
      '127.0.0.1:10008',
      2
    ],
    [
      '127.0.0.1:10009',
      3
    ]
  ]
}
S: Setting server list to [
  [
    '127.0.0.1:10001',
    3
  ],
  [
    '127.0.0.1:10002',
    2
  ],
  [
    '127.0.0.1:10003',
    2
  ],
  [
    '127.0.0.1:10004',
    2
  ],
  [
    '127.0.0.1:10005',
    3
  ],
  [
    '127.0.0.1:10006',
    3
  ],
  '127.0.0.1:10007',
  [
    '127.0.0.1:10008',
    2
  ],
  [
    '127.0.0.1:10009',
    3
  ]
]
S: Bucket list is [
  '127.0.0.1:10001',
  '127.0.0.1:10001',
  '127.0.0.1:10001',
  '127.0.0.1:10002',
  '127.0.0.1:10002',
  '127.0.0.1:10003',
  '127.0.0.1:10003',
  '127.0.0.1:10004',
  '127.0.0.1:10004',
  '127.0.0.1:10005',
  '127.0.0.1:10005',
  '127.0.0.1:10005',
  '127.0.0.1:10006',
  '127.0.0.1:10006',
  '127.0.0.1:10006',
  '127.0.0.1:10007',
  '127.0.0.1:10008',
  '127.0.0.1:10008',
  '127.0.0.1:10009',
  '127.0.0.1:10009',
  '127.0.0.1:10009'
]
, bucket count is 21
Creating connection for 127.0.0.1:10003
Creating connection for 127.0.0.1:10007
Creating connection for 127.0.0.1:10004
Creating connection for 127.0.0.1:10002
Creating connection for 127.0.0.1:10009
Creating connection for 127.0.0.1:10006
Creating connection for 127.0.0.1:10005
Creating connection for 127.0.0.1:10008
Creating connection for 127.0.0.1:10001
C: Done creating object
S: Setting server list to [
  [
    '127.0.0.1:10001',
    3
  ],
  [
    '127.0.0.1:10002',
    2
  ],
  [
    '127.0.0.1:10003',
    2
  ],
  [
    '127.0.0.1:10004',
    2
  ],
  [
    '127.0.0.1:10005',
    3
  ],
  [
    '127.0.0.1:10006',
    3
  ],
  '127.0.0.1:10007',
  [
    '127.0.0.1:10008',
    2
  ],
  [
    '127.0.0.1:10009',
    3
  ]
]
S: Bucket list is [
  '127.0.0.1:10001',
  '127.0.0.1:10001',
  '127.0.0.1:10001',
  '127.0.0.1:10002',
  '127.0.0.1:10002',
  '127.0.0.1:10003',
  '127.0.0.1:10003',
  '127.0.0.1:10004',
  '127.0.0.1:10004',
  '127.0.0.1:10005',
  '127.0.0.1:10005',
  '127.0.0.1:10005',
  '127.0.0.1:10006',
  '127.0.0.1:10006',
  '127.0.0.1:10006',
  '127.0.0.1:10007',
  '127.0.0.1:10008',
  '127.0.0.1:10008',
  '127.0.0.1:10009',
  '127.0.0.1:10009',
  '127.0.0.1:10009'
]
, bucket count is 21
Mock cluster is bless( {
  hash_namespace => 1,
  namespace => '1288727994.11859.',
  selector => bless( {
    bucketcount => 21,
    buckets => [
      '127.0.0.1:10001',
      '127.0.0.1:10001',
      '127.0.0.1:10001',
      '127.0.0.1:10002',
      '127.0.0.1:10002',
      '127.0.0.1:10003',
      '127.0.0.1:10003',
      '127.0.0.1:10004',
      '127.0.0.1:10004',
      '127.0.0.1:10005',
      '127.0.0.1:10005',
      '127.0.0.1:10005',
      '127.0.0.1:10006',
      '127.0.0.1:10006',
      '127.0.0.1:10006',
      '127.0.0.1:10007',
      '127.0.0.1:10008',
      '127.0.0.1:10008',
      '127.0.0.1:10009',
      '127.0.0.1:10009',
      '127.0.0.1:10009'
    ]
  }, 'Memcached::Client::Selector::Traditional' ),
  servers => {
    '127.0.0.1:10001' => {},
    '127.0.0.1:10002' => {},
    '127.0.0.1:10003' => {},
    '127.0.0.1:10004' => {},
    '127.0.0.1:10005' => {},
    '127.0.0.1:10006' => {},
    '127.0.0.1:10007' => {},
    '127.0.0.1:10008' => {},
    '127.0.0.1:10009' => {}
  },
  version => '1.4.5'
}, 't::Memcached::Mock' )
Choice is #0, 127.0.0.1:10001
T: running Traditional/Binary synchronous
T: ->connect is connect ([
  1
]
)
C [connect]: Starting connection
C [connect]: Connecting 127.0.0.1:10003
C [127.0.0.1:10003]: connecting to [127.0.0.1:10003]
C [127.0.0.1:10003]: preparing handle
C [connect]: Connecting 127.0.0.1:10004
C [127.0.0.1:10004]: connecting to [127.0.0.1:10004]
C [127.0.0.1:10004]: preparing handle
C [connect]: Connecting 127.0.0.1:10007
C [127.0.0.1:10007]: connecting to [127.0.0.1:10007]
C [127.0.0.1:10007]: preparing handle
C [connect]: Connecting 127.0.0.1:10002
C [127.0.0.1:10002]: connecting to [127.0.0.1:10002]
C [127.0.0.1:10002]: preparing handle
C [connect]: Connecting 127.0.0.1:10009
C [127.0.0.1:10009]: connecting to [127.0.0.1:10009]
C [127.0.0.1:10009]: preparing handle
C [connect]: Connecting 127.0.0.1:10005
C [127.0.0.1:10005]: connecting to [127.0.0.1:10005]
C [127.0.0.1:10005]: preparing handle
C [connect]: Connecting 127.0.0.1:10006
C [127.0.0.1:10006]: connecting to [127.0.0.1:10006]
C [127.0.0.1:10006]: preparing handle
C [connect]: Connecting 127.0.0.1:10008
C [127.0.0.1:10008]: connecting to [127.0.0.1:10008]
C [127.0.0.1:10008]: preparing handle
C [connect]: Connecting 127.0.0.1:10001
C [127.0.0.1:10001]: connecting to [127.0.0.1:10001]
C [127.0.0.1:10001]: preparing handle
C: using condvar
C [127.0.0.1:10001]: connected
C [connect]: Done connecting 127.0.0.1:10001
C [127.0.0.1:10001]: checking for job
C [127.0.0.1:10006]: connected
C [connect]: Done connecting 127.0.0.1:10006
C [127.0.0.1:10006]: checking for job
C [127.0.0.1:10005]: connected
C [connect]: Done connecting 127.0.0.1:10005
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10009]: connected
C [connect]: Done connecting 127.0.0.1:10009
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10002]: connected
C [connect]: Done connecting 127.0.0.1:10002
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10004]: connected
C [connect]: Done connecting 127.0.0.1:10004
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10003]: connected
C [connect]: Done connecting 127.0.0.1:10003
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10007]: connected
C [connect]: Done connecting 127.0.0.1:10007
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10008]: connected
C [connect]: Done connecting 127.0.0.1:10008
C [127.0.0.1:10008]: checking for job
T: Checking for version on all servers is version ([]
)
M: version: 127.0.0.1:10003
M: version: 127.0.0.1:10007
M: version: 127.0.0.1:10004
M: version: 127.0.0.1:10002
M: version: 127.0.0.1:10009
M: version: 127.0.0.1:10006
M: version: 127.0.0.1:10005
M: version: 127.0.0.1:10008
M: version: 127.0.0.1:10001
C [version]: enqueuing to 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: version: 127.0.0.1:10003
C [version]: enqueuing to 127.0.0.1:10004
C [127.0.0.1:10004]: queuing request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10004]: executing
P: version: 127.0.0.1:10004
C [version]: enqueuing to 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: version: 127.0.0.1:10007
C [version]: enqueuing to 127.0.0.1:10002
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
P: version: 127.0.0.1:10002
C [version]: enqueuing to 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: version: 127.0.0.1:10009
C [version]: enqueuing to 127.0.0.1:10005
C [127.0.0.1:10005]: queuing request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10005]: executing
P: version: 127.0.0.1:10005
C [version]: enqueuing to 127.0.0.1:10006
C [127.0.0.1:10006]: queuing request
C [127.0.0.1:10006]: checking for job
C [127.0.0.1:10006]: executing
P: version: 127.0.0.1:10006
C [version]: enqueuing to 127.0.0.1:10008
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: version: 127.0.0.1:10008
C [version]: enqueuing to 127.0.0.1:10001
C [127.0.0.1:10001]: queuing request
C [127.0.0.1:10001]: checking for job
C [127.0.0.1:10001]: executing
P: version: 127.0.0.1:10001
C: using condvar
C [127.0.0.1:10006]: done with request
C [127.0.0.1:10006]: checking for job
C [127.0.0.1:10005]: done with request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10002]: done with request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10004]: done with request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10001]: done with request
C [127.0.0.1:10001]: checking for job
T: ->set without a key is set ([]
)
C [set]: using condvar
T: ->set without a value is set ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [set]: [foo]
C [__set]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x93c5e38)] [] [Memcached::Client::Connection=HASH(0x9456188)] [foo]
C [set]: using condvar
T: ->set with a value is set ([
  'foo',
  'bar'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: set: 127.0.0.1:10007 - 1288727994.11859.foo - bar
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [set]: [foo] [bar]
C [__set]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x9452ce0)] [] [Memcached::Client::Connection=HASH(0x9456188)] [foo] [bar]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: set: 127.0.0.1:10007 - 1288727994.11859.foo - bar
C [set]: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
T: ->set with a pre-hashed key is set ([
  [
    '37',
    'llama'
  ],
  'bar'
]
)
S: Hash value is 37, bucket # is 16, bucket value is 127.0.0.1:10008
M: set: 127.0.0.1:10008 - 1288727994.11859.llama - bar
S: Hash value is 37, bucket # is 16, bucket value is 127.0.0.1:10008
C [set]: [ARRAY(0x9452b30)] [bar]
C [__set]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x903f0c8)] [] [Memcached::Client::Connection=HASH(0x9461bc0)] [ARRAY(0x9452b30)] [bar]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: set: 127.0.0.1:10008 - 1288727994.11859.llama - bar
C [set]: using condvar
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
T: ->set_multi with various keys is set_multi ([
  [
    [
      'teatime',
      3
    ],
    [
      'bagman',
      'ludo'
    ]
  ]
]
)
S: Hash value is 23947, bucket # is 7, bucket value is 127.0.0.1:10004
M: set: 127.0.0.1:10004 - 1288727994.11859.teatime - 3
S: Hash value is 11048, bucket # is 2, bucket value is 127.0.0.1:10001
M: set: 127.0.0.1:10001 - 1288727994.11859.bagman - ludo
C: calling __set_multi - [
  [
    [
      'teatime',
      3
    ],
    [
      'bagman',
      'ludo'
    ]
  ]
]
C [__set]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x948bf68)] [] [ARRAY(0x93c8ca8)]
Tuples are [
  [
    'teatime',
    3
  ],
  [
    'bagman',
    'ludo'
  ]
]
Tuple is [
  'teatime',
  3
]
S: Hash value is 23947, bucket # is 7, bucket value is 127.0.0.1:10004
C: set 127.0.0.1:10004
C [127.0.0.1:10004]: queuing request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10004]: executing
P: set: 127.0.0.1:10004 - 1288727994.11859.teatime - 3
Tuple is [
  'bagman',
  'ludo'
]
S: Hash value is 11048, bucket # is 2, bucket value is 127.0.0.1:10001
C: set 127.0.0.1:10001
C [127.0.0.1:10001]: queuing request
C [127.0.0.1:10001]: checking for job
C [127.0.0.1:10001]: executing
P: set: 127.0.0.1:10001 - 1288727994.11859.bagman - ludo
C: using condvar
C [127.0.0.1:10004]: done with request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10001]: done with request
C [127.0.0.1:10001]: checking for job
T: ->add without a key is add ([]
)
C [add]: using condvar
T: ->add without a value is add ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [add]: [foo]
C [__add]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x93c5e18)] [] [Memcached::Client::Connection=HASH(0x9456188)] [foo]
C [add]: using condvar
T: ->add with a value is add ([
  'bar',
  'baz'
]
)
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: add: 127.0.0.1:10008 - 1288727994.11859.bar - baz
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
C [add]: [bar] [baz]
C [__add]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x93ba2d8)] [] [Memcached::Client::Connection=HASH(0x9461bc0)] [bar] [baz]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: add: 127.0.0.1:10008 - 1288727994.11859.bar - baz
C [add]: using condvar
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
T: ->add with an existing value is add ([
  'bar',
  'foo'
]
)
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: add: 127.0.0.1:10008 - 1288727994.11859.bar - foo
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
C [add]: [bar] [foo]
C [__add]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x93c8658)] [] [Memcached::Client::Connection=HASH(0x9461bc0)] [bar] [foo]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: add: 127.0.0.1:10008 - 1288727994.11859.bar - foo
C [add]: using condvar
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
T: ->set_multi with various pre-existing keys is add_multi ([
  [
    [
      'teatime',
      3
    ],
    [
      'bagman',
      'ludo'
    ]
  ]
]
)
S: Hash value is 23947, bucket # is 7, bucket value is 127.0.0.1:10004
M: add: 127.0.0.1:10004 - 1288727994.11859.teatime - 3
S: Hash value is 11048, bucket # is 2, bucket value is 127.0.0.1:10001
M: add: 127.0.0.1:10001 - 1288727994.11859.bagman - ludo
C: calling __add_multi - [
  [
    [
      'teatime',
      3
    ],
    [
      'bagman',
      'ludo'
    ]
  ]
]
C [__add]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x93b9f58)] [] [ARRAY(0x9459488)]
Tuples are [
  [
    'teatime',
    3
  ],
  [
    'bagman',
    'ludo'
  ]
]
Tuple is [
  'teatime',
  3
]
S: Hash value is 23947, bucket # is 7, bucket value is 127.0.0.1:10004
C: add 127.0.0.1:10004
C [127.0.0.1:10004]: queuing request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10004]: executing
P: add: 127.0.0.1:10004 - 1288727994.11859.teatime - 3
Tuple is [
  'bagman',
  'ludo'
]
S: Hash value is 11048, bucket # is 2, bucket value is 127.0.0.1:10001
C: add 127.0.0.1:10001
C [127.0.0.1:10001]: queuing request
C [127.0.0.1:10001]: checking for job
C [127.0.0.1:10001]: executing
P: add: 127.0.0.1:10001 - 1288727994.11859.bagman - ludo
C: using condvar
C [127.0.0.1:10004]: done with request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10001]: done with request
C [127.0.0.1:10001]: checking for job
T: ->set_multi with various keys is add_multi ([
  [
    [
      'porridge',
      'salty'
    ],
    [
      'complex',
      'simple'
    ],
    [
      'bagman',
      'horace'
    ]
  ]
]
)
S: Hash value is 32061, bucket # is 15, bucket value is 127.0.0.1:10007
M: add: 127.0.0.1:10007 - 1288727994.11859.porridge - salty
S: Hash value is 14831, bucket # is 5, bucket value is 127.0.0.1:10003
M: add: 127.0.0.1:10003 - 1288727994.11859.complex - simple
S: Hash value is 11048, bucket # is 2, bucket value is 127.0.0.1:10001
M: add: 127.0.0.1:10001 - 1288727994.11859.bagman - horace
C: calling __add_multi - [
  [
    [
      'porridge',
      'salty'
    ],
    [
      'complex',
      'simple'
    ],
    [
      'bagman',
      'horace'
    ]
  ]
]
C [__add]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x93ba1d8)] [] [ARRAY(0x9041918)]
Tuples are [
  [
    'porridge',
    'salty'
  ],
  [
    'complex',
    'simple'
  ],
  [
    'bagman',
    'horace'
  ]
]
Tuple is [
  'porridge',
  'salty'
]
S: Hash value is 32061, bucket # is 15, bucket value is 127.0.0.1:10007
C: add 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: add: 127.0.0.1:10007 - 1288727994.11859.porridge - salty
Tuple is [
  'complex',
  'simple'
]
S: Hash value is 14831, bucket # is 5, bucket value is 127.0.0.1:10003
C: add 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: add: 127.0.0.1:10003 - 1288727994.11859.complex - simple
Tuple is [
  'bagman',
  'horace'
]
S: Hash value is 11048, bucket # is 2, bucket value is 127.0.0.1:10001
C: add 127.0.0.1:10001
C [127.0.0.1:10001]: queuing request
C [127.0.0.1:10001]: checking for job
C [127.0.0.1:10001]: executing
P: add: 127.0.0.1:10001 - 1288727994.11859.bagman - horace
C: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10001]: done with request
C [127.0.0.1:10001]: checking for job
T: ->add with a pre-hashed key is set ([
  [
    '19',
    'ding-dong'
  ],
  'bar'
]
)
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: set: 127.0.0.1:10009 - 1288727994.11859.ding-dong - bar
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [set]: [ARRAY(0x9041868)] [bar]
C [__set]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x9461b80)] [] [Memcached::Client::Connection=HASH(0x943f128)] [ARRAY(0x9041868)] [bar]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: set: 127.0.0.1:10009 - 1288727994.11859.ding-dong - bar
C [set]: using condvar
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
T: ->get without a key is get ([]
)
C [get]: using condvar
T: ->get a non-existant value is get ([
  'bang'
]
)
S: Hash value is 11036, bucket # is 11, bucket value is 127.0.0.1:10005
M: get: 127.0.0.1:10005 - 1288727994.11859.bang
S: Hash value is 11036, bucket # is 11, bucket value is 127.0.0.1:10005
C [get]: [bang]
C [get]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x9461ca0)] [] [Memcached::Client::Connection=HASH(0x94618d0)] [bang]
C [127.0.0.1:10005]: queuing request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10005]: executing
P: get: 127.0.0.1:10005 - 1288727994.11859.bang
C [get]: using condvar
C [127.0.0.1:10005]: done with request
C [127.0.0.1:10005]: checking for job
C: get - result {}
T: ->get an existing value is get ([
  'bar'
]
)
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727994.11859.bar
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
C [get]: [bar]
C [get]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x93b9f68)] [] [Memcached::Client::Connection=HASH(0x9461bc0)] [bar]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727994.11859.bar
C [get]: using condvar
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727994.11859.bar' => {
    cas => 6,
    data => 'baz',
    flags => 0
  }
}
T: ->get a value with a pre-hashed key is get ([
  [
    '19',
    'ding-dong'
  ]
]
)
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: get: 127.0.0.1:10009 - 1288727994.11859.ding-dong
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [get]: [ARRAY(0x901a0b0)]
C [get]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x93c8448)] [] [Memcached::Client::Connection=HASH(0x943f128)] [ARRAY(0x901a0b0)]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: get: 127.0.0.1:10009 - 1288727994.11859.ding-dong
C [get]: using condvar
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C: get - result {
  '1288727994.11859.ding-dong' => {
    cas => 8,
    data => 'bar',
    flags => 0
  }
}
T: ->get_multi without a list is get_multi ([]
)
C: calling __get_multi - []
C [get_multi]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x943e6e8)] []
C: using condvar
T: ->get_multi with an empty list is get_multi ([
  []
]
)
C: calling __get_multi - [
  []
]
C [get_multi]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x9459598)] [] [ARRAY(0x93c83b8)]
C: using condvar
T: ->get with all keys set so far is get_multi ([
  [
    'bar',
    'foo',
    'porridge'
  ]
]
)
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727994.11859.bar
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: get: 127.0.0.1:10007 - 1288727994.11859.foo
S: Hash value is 32061, bucket # is 15, bucket value is 127.0.0.1:10007
M: get: 127.0.0.1:10007 - 1288727994.11859.porridge
C: calling __get_multi - [
  [
    'bar',
    'foo',
    'porridge'
  ]
]
C [get_multi]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x9461e40)] [] [ARRAY(0x93ba468)]
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
S: Hash value is 32061, bucket # is 15, bucket value is 127.0.0.1:10007
C: get 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: get: 127.0.0.1:10007 - 1288727994.11859.foo
P: get: 127.0.0.1:10007 - 1288727994.11859.porridge
C: get 127.0.0.1:10008
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727994.11859.bar
C: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C: get - result {
  '1288727994.11859.foo' => {
    cas => 14,
    data => 'bar',
    flags => 0
  },
  '1288727994.11859.porridge' => {
    cas => 15,
    data => 'salty',
    flags => 0
  }
}
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727994.11859.bar' => {
    cas => 6,
    data => 'baz',
    flags => 0
  }
}
T: ->get with all keys set so far is get_multi ([
  [
    [
      '37',
      'llama'
    ],
    'bar',
    'foo'
  ]
]
)
S: Hash value is 37, bucket # is 16, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727994.11859.llama
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727994.11859.bar
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: get: 127.0.0.1:10007 - 1288727994.11859.foo
C: calling __get_multi - [
  [
    [
      37,
      'llama'
    ],
    'bar',
    'foo'
  ]
]
C [get_multi]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x9459718)] [] [ARRAY(0x945f630)]
S: Hash value is 37, bucket # is 16, bucket value is 127.0.0.1:10008
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C: get 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: get: 127.0.0.1:10007 - 1288727994.11859.foo
C: get 127.0.0.1:10008
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727994.11859.llama
P: get: 127.0.0.1:10008 - 1288727994.11859.bar
C: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C: get - result {
  '1288727994.11859.foo' => {
    cas => 14,
    data => 'bar',
    flags => 0
  }
}
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727994.11859.bar' => {
    cas => 6,
    data => 'baz',
    flags => 0
  },
  '1288727994.11859.llama' => {
    cas => 5,
    data => 'bar',
    flags => 0
  }
}
T: ->replace without a key is replace ([]
)
C [replace]: using condvar
T: ->replace without a value is replace ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [replace]: [foo]
C [__replace]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x93c8358)] [] [Memcached::Client::Connection=HASH(0x9456188)] [foo]
C [replace]: using condvar
T: ->replace with a non-existent value is replace ([
  'baz',
  'gorp'
]
)
S: Hash value is 22675, bucket # is 16, bucket value is 127.0.0.1:10008
M: replace: 127.0.0.1:10008 - 1288727994.11859.baz - gorp
S: Hash value is 22675, bucket # is 16, bucket value is 127.0.0.1:10008
C [replace]: [baz] [gorp]
C [__replace]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x93c6280)] [] [Memcached::Client::Connection=HASH(0x9461bc0)] [baz] [gorp]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: replace: 127.0.0.1:10008 - 1288727994.11859.baz - gorp
C [replace]: using condvar
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
Failing 127.0.0.1:10001
Deleted 127.0.0.1:10001, result bless( {
  hash_namespace => 1,
  namespace => '1288727994.11859.',
  selector => bless( {
    bucketcount => 21,
    buckets => [
      '127.0.0.1:10001',
      '127.0.0.1:10001',
      '127.0.0.1:10001',
      '127.0.0.1:10002',
      '127.0.0.1:10002',
      '127.0.0.1:10003',
      '127.0.0.1:10003',
      '127.0.0.1:10004',
      '127.0.0.1:10004',
      '127.0.0.1:10005',
      '127.0.0.1:10005',
      '127.0.0.1:10005',
      '127.0.0.1:10006',
      '127.0.0.1:10006',
      '127.0.0.1:10006',
      '127.0.0.1:10007',
      '127.0.0.1:10008',
      '127.0.0.1:10008',
      '127.0.0.1:10009',
      '127.0.0.1:10009',
      '127.0.0.1:10009'
    ]
  }, 'Memcached::Client::Selector::Traditional' ),
  servers => {
    '127.0.0.1:10002' => {},
    '127.0.0.1:10003' => {
      '1288727994.11859.complex' => 'simple'
    },
    '127.0.0.1:10004' => {
      '1288727994.11859.teatime' => 3
    },
    '127.0.0.1:10005' => {},
    '127.0.0.1:10006' => {},
    '127.0.0.1:10007' => {
      '1288727994.11859.foo' => 'bar',
      '1288727994.11859.porridge' => 'salty'
    },
    '127.0.0.1:10008' => {
      '1288727994.11859.bar' => 'baz',
      '1288727994.11859.llama' => 'bar'
    },
    '127.0.0.1:10009' => {
      '1288727994.11859.ding-dong' => 'bar'
    }
  },
  version => '1.4.5'
}, 't::Memcached::Mock' )
Pid is 11904
Trying TERM
Waitpid returned 11904
T: ->replace with an existing value is replace ([
  'bar',
  'gondola'
]
)
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: replace: 127.0.0.1:10008 - 1288727994.11859.bar - gondola
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
C [replace]: [bar] [gondola]
C [__replace]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x93c86a8)] [] [Memcached::Client::Connection=HASH(0x9461bc0)] [bar] [gondola]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: replace: 127.0.0.1:10008 - 1288727994.11859.bar - gondola
C [replace]: using condvar
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
T: ->replace_multi with various keys is replace_multi ([
  [
    [
      'porridge',
      'sweet'
    ],
    [
      'complex',
      'NP'
    ],
    [
      'ludo',
      'panopticon'
    ]
  ]
]
)
S: Hash value is 32061, bucket # is 15, bucket value is 127.0.0.1:10007
M: replace: 127.0.0.1:10007 - 1288727994.11859.porridge - sweet
S: Hash value is 14831, bucket # is 5, bucket value is 127.0.0.1:10003
M: replace: 127.0.0.1:10003 - 1288727994.11859.complex - NP
S: Hash value is 9432, bucket # is 3, bucket value is 127.0.0.1:10002
M: replace: 127.0.0.1:10002 - 1288727994.11859.ludo - panopticon
C: calling __replace_multi - [
  [
    [
      'porridge',
      'sweet'
    ],
    [
      'complex',
      'NP'
    ],
    [
      'ludo',
      'panopticon'
    ]
  ]
]
C [__replace]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x9462040)] [] [ARRAY(0x93c8cd8)]
Tuples are [
  [
    'porridge',
    'sweet'
  ],
  [
    'complex',
    'NP'
  ],
  [
    'ludo',
    'panopticon'
  ]
]
Tuple is [
  'porridge',
  'sweet'
]
S: Hash value is 32061, bucket # is 15, bucket value is 127.0.0.1:10007
C: replace 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: replace: 127.0.0.1:10007 - 1288727994.11859.porridge - sweet
Tuple is [
  'complex',
  'NP'
]
S: Hash value is 14831, bucket # is 5, bucket value is 127.0.0.1:10003
C: replace 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: replace: 127.0.0.1:10003 - 1288727994.11859.complex - NP
Tuple is [
  'ludo',
  'panopticon'
]
S: Hash value is 9432, bucket # is 3, bucket value is 127.0.0.1:10002
C: replace 127.0.0.1:10002
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
P: replace: 127.0.0.1:10002 - 1288727994.11859.ludo - panopticon
C: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10002]: done with request
C [127.0.0.1:10002]: checking for job
T: ->get to verify replacement is get ([
  'bar'
]
)
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727994.11859.bar
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
C [get]: [bar]
C [get]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x93c8758)] [] [Memcached::Client::Connection=HASH(0x9461bc0)] [bar]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727994.11859.bar
C [get]: using condvar
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727994.11859.bar' => {
    cas => 7,
    data => 'gondola',
    flags => 0
  }
}
T: ->get a key that is too large and does not exist is get ([
  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
]
)
S: Hash value is 26803, bucket # is 7, bucket value is 127.0.0.1:10004
M: get: 127.0.0.1:10004 - 1288727994.11859.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
C [get]: using condvar
T: ->set a key that is too large and does not exist is set ([
  'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb',
  'lurch'
]
)
S: Hash value is 23903, bucket # is 5, bucket value is 127.0.0.1:10003
M: set: 127.0.0.1:10003 - 1288727994.11859.bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb - lurch
C [set]: using condvar
T: ->replace with a pre-hashed key and non-existent value is replace ([
  [
    '18',
    'ding-dong'
  ],
  'bar'
]
)
S: Hash value is 18, bucket # is 18, bucket value is 127.0.0.1:10009
M: replace: 127.0.0.1:10009 - 1288727994.11859.ding-dong - bar
S: Hash value is 18, bucket # is 18, bucket value is 127.0.0.1:10009
C [replace]: [ARRAY(0x9459738)] [bar]
C [__replace]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x9461b00)] [] [Memcached::Client::Connection=HASH(0x943f128)] [ARRAY(0x9459738)] [bar]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: replace: 127.0.0.1:10009 - 1288727994.11859.ding-dong - bar
C [replace]: using condvar
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
T: ->replace with a pre-hashed key and an existing value is replace ([
  [
    '19',
    'ding-dong'
  ],
  'baz'
]
)
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: replace: 127.0.0.1:10009 - 1288727994.11859.ding-dong - baz
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [replace]: [ARRAY(0x9452ac0)] [baz]
C [__replace]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x93c8088)] [] [Memcached::Client::Connection=HASH(0x943f128)] [ARRAY(0x9452ac0)] [baz]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: replace: 127.0.0.1:10009 - 1288727994.11859.ding-dong - baz
C [replace]: using condvar
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
T: ->get a value with a pre-hashed key is get ([
  [
    '19',
    'ding-dong'
  ]
]
)
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: get: 127.0.0.1:10009 - 1288727994.11859.ding-dong
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [get]: [ARRAY(0x93c8d38)]
C [get]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x93c5dc8)] [] [Memcached::Client::Connection=HASH(0x943f128)] [ARRAY(0x93c8d38)]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: get: 127.0.0.1:10009 - 1288727994.11859.ding-dong
C [get]: using condvar
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C: get - result {
  '1288727994.11859.ding-dong' => {
    cas => 10,
    data => 'baz',
    flags => 0
  }
}
T: ->append without a key is append ([]
)
C [append]: using condvar
T: ->append without a value is append ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [append]: [foo]
C [__append]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x9041798)] [] [Memcached::Client::Connection=HASH(0x9456188)] [foo]
C [append]: using condvar
T: ->append with a non-existent value is append ([
  'baz',
  'gorp'
]
)
S: Hash value is 22675, bucket # is 16, bucket value is 127.0.0.1:10008
M: append: 127.0.0.1:10008 - 1288727994.11859.baz - gorp
S: Hash value is 22675, bucket # is 16, bucket value is 127.0.0.1:10008
C [append]: [baz] [gorp]
C [__append]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x903e2e8)] [] [Memcached::Client::Connection=HASH(0x9461bc0)] [baz] [gorp]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: append: 127.0.0.1:10008 - 1288727994.11859.baz - gorp
C [append]: using condvar
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
T: ->append with an existing value is append ([
  'bar',
  'gorp'
]
)
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: append: 127.0.0.1:10008 - 1288727994.11859.bar - gorp
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
C [append]: [bar] [gorp]
C [__append]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x93c8368)] [] [Memcached::Client::Connection=HASH(0x9461bc0)] [bar] [gorp]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: append: 127.0.0.1:10008 - 1288727994.11859.bar - gorp
C [append]: using condvar
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
T: ->append_multi with various keys is append_multi ([
  [
    [
      'porridge',
      ' and salty'
    ],
    [
      'complex',
      ' != P'
    ]
  ]
]
)
S: Hash value is 32061, bucket # is 15, bucket value is 127.0.0.1:10007
M: append: 127.0.0.1:10007 - 1288727994.11859.porridge -  and salty
S: Hash value is 14831, bucket # is 5, bucket value is 127.0.0.1:10003
M: append: 127.0.0.1:10003 - 1288727994.11859.complex -  != P
C: calling __append_multi - [
  [
    [
      'porridge',
      ' and salty'
    ],
    [
      'complex',
      ' != P'
    ]
  ]
]
C [__append]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945b210)] [] [ARRAY(0x9458d08)]
Tuples are [
  [
    'porridge',
    ' and salty'
  ],
  [
    'complex',
    ' != P'
  ]
]
Tuple is [
  'porridge',
  ' and salty'
]
S: Hash value is 32061, bucket # is 15, bucket value is 127.0.0.1:10007
C: append 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: append: 127.0.0.1:10007 - 1288727994.11859.porridge -  and salty
Tuple is [
  'complex',
  ' != P'
]
S: Hash value is 14831, bucket # is 5, bucket value is 127.0.0.1:10003
C: append 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: append: 127.0.0.1:10003 - 1288727994.11859.complex -  != P
C: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
T: ->get to verify ->append is get ([
  'bar'
]
)
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727994.11859.bar
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
C [get]: [bar]
C [get]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x9459858)] [] [Memcached::Client::Connection=HASH(0x9461bc0)] [bar]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727994.11859.bar
C [get]: using condvar
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727994.11859.bar' => {
    cas => 8,
    data => 'gondolagorp',
    flags => 0
  }
}
T: ->append with a pre-hashed key and non-existent value is append ([
  [
    '18',
    'ding-dong'
  ],
  'flagon'
]
)
S: Hash value is 18, bucket # is 18, bucket value is 127.0.0.1:10009
M: append: 127.0.0.1:10009 - 1288727994.11859.ding-dong - flagon
S: Hash value is 18, bucket # is 18, bucket value is 127.0.0.1:10009
C [append]: [ARRAY(0x945b450)] [flagon]
C [__append]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945b440)] [] [Memcached::Client::Connection=HASH(0x943f128)] [ARRAY(0x945b450)] [flagon]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: append: 127.0.0.1:10009 - 1288727994.11859.ding-dong - flagon
C [append]: using condvar
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
T: ->append with a pre-hashed key and an existing value is append ([
  [
    '19',
    'ding-dong'
  ],
  'flagged'
]
)
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: append: 127.0.0.1:10009 - 1288727994.11859.ding-dong - flagged
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [append]: [ARRAY(0x9459698)] [flagged]
C [__append]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945b290)] [] [Memcached::Client::Connection=HASH(0x943f128)] [ARRAY(0x9459698)] [flagged]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: append: 127.0.0.1:10009 - 1288727994.11859.ding-dong - flagged
C [append]: using condvar
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
T: ->get a value with a pre-hashed key is get ([
  [
    '19',
    'ding-dong'
  ]
]
)
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: get: 127.0.0.1:10009 - 1288727994.11859.ding-dong
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [get]: [ARRAY(0x9458bb8)]
C [get]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945b4f0)] [] [Memcached::Client::Connection=HASH(0x943f128)] [ARRAY(0x9458bb8)]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: get: 127.0.0.1:10009 - 1288727994.11859.ding-dong
C [get]: using condvar
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C: get - result {
  '1288727994.11859.ding-dong' => {
    cas => 12,
    data => 'bazflagonflagged',
    flags => 0
  }
}
T: ->prepend without a key is prepend ([]
)
C [prepend]: using condvar
T: ->prepend without a value is prepend ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [prepend]: [foo]
C [__prepend]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945eb50)] [] [Memcached::Client::Connection=HASH(0x9456188)] [foo]
C [prepend]: using condvar
T: ->prepend with a non-existent value is prepend ([
  'baz',
  'gorp'
]
)
S: Hash value is 22675, bucket # is 16, bucket value is 127.0.0.1:10008
M: prepend: 127.0.0.1:10008 - 1288727994.11859.baz - gorp
S: Hash value is 22675, bucket # is 16, bucket value is 127.0.0.1:10008
C [prepend]: [baz] [gorp]
C [__prepend]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945eb70)] [] [Memcached::Client::Connection=HASH(0x9461bc0)] [baz] [gorp]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: prepend: 127.0.0.1:10008 - 1288727994.11859.baz - gorp
C [prepend]: using condvar
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
T: ->prepend with an existing value is prepend ([
  'foo',
  'gorp'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: prepend: 127.0.0.1:10007 - 1288727994.11859.foo - gorp
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [prepend]: [foo] [gorp]
C [__prepend]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945b630)] [] [Memcached::Client::Connection=HASH(0x9456188)] [foo] [gorp]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: prepend: 127.0.0.1:10007 - 1288727994.11859.foo - gorp
C [prepend]: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
T: ->prepend_multi with various keys is prepend_multi ([
  [
    [
      'porridge',
      'We love '
    ]
  ]
]
)
S: Hash value is 32061, bucket # is 15, bucket value is 127.0.0.1:10007
M: prepend: 127.0.0.1:10007 - 1288727994.11859.porridge - We love 
C: calling __prepend_multi - [
  [
    [
      'porridge',
      'We love '
    ]
  ]
]
C [__prepend]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945b830)] [] [ARRAY(0x945b6d0)]
Tuples are [
  [
    'porridge',
    'We love '
  ]
]
Tuple is [
  'porridge',
  'We love '
]
S: Hash value is 32061, bucket # is 15, bucket value is 127.0.0.1:10007
C: prepend 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: prepend: 127.0.0.1:10007 - 1288727994.11859.porridge - We love 
C: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
T: ->get to verify ->prepend is get ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: get: 127.0.0.1:10007 - 1288727994.11859.foo
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [get]: [foo]
C [get]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945b7e0)] [] [Memcached::Client::Connection=HASH(0x9456188)] [foo]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: get: 127.0.0.1:10007 - 1288727994.11859.foo
C [get]: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C: get - result {
  '1288727994.11859.foo' => {
    cas => 18,
    data => 'gorpbar',
    flags => 0
  }
}
T: ->delete without a key is delete ([]
)
C [delete]: using condvar
T: ->delete with a non-existent key is delete ([
  'bang'
]
)
S: Hash value is 11036, bucket # is 11, bucket value is 127.0.0.1:10005
M: delete: 127.0.0.1:10005 - 1288727994.11859.bang
S: Hash value is 11036, bucket # is 11, bucket value is 127.0.0.1:10005
C [delete]: [bang]
C [delete]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x9459668)] [] [Memcached::Client::Connection=HASH(0x94618d0)] [bang]
C [127.0.0.1:10005]: queuing request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10005]: executing
P: delete: 127.0.0.1:10005 - 1288727994.11859.bang
C [delete]: using condvar
C [127.0.0.1:10005]: done with request
C [127.0.0.1:10005]: checking for job
T: ->delete with an existing key is delete ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: delete: 127.0.0.1:10007 - 1288727994.11859.foo
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [delete]: [foo]
C [delete]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945f5d0)] [] [Memcached::Client::Connection=HASH(0x9456188)] [foo]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: delete: 127.0.0.1:10007 - 1288727994.11859.foo
C [delete]: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
T: ->delete_multi with various keys is delete_multi ([
  'complex',
  'panopticon'
]
)
S: Hash value is 14831, bucket # is 5, bucket value is 127.0.0.1:10003
M: delete: 127.0.0.1:10003 - 1288727994.11859.complex
S: Hash value is 13249, bucket # is 19, bucket value is 127.0.0.1:10009
M: delete: 127.0.0.1:10009 - 1288727994.11859.panopticon
C: calling __delete_multi - [
  'complex',
  'panopticon'
]
C [delete_multi]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945f480)] [] [complex] [panopticon]
Keys are [
  'complex',
  'panopticon'
]
S: Hash value is 14831, bucket # is 5, bucket value is 127.0.0.1:10003
key is complex
C: delete_multi 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: delete: 127.0.0.1:10003 - 1288727994.11859.complex
S: Hash value is 13249, bucket # is 19, bucket value is 127.0.0.1:10009
key is panopticon
C: delete_multi 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: delete: 127.0.0.1:10009 - 1288727994.11859.panopticon
C: using condvar
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
T: ->get to verify ->delete is get ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: get: 127.0.0.1:10007 - 1288727994.11859.foo
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [get]: [foo]
C [get]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945bd50)] [] [Memcached::Client::Connection=HASH(0x9456188)] [foo]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: get: 127.0.0.1:10007 - 1288727994.11859.foo
C [get]: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C: get - result {}
T: ->add with a value is add ([
  'foo',
  '1'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: add: 127.0.0.1:10007 - 1288727994.11859.foo - 1
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [add]: [foo] [1]
C [__add]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945f2c0)] [] [Memcached::Client::Connection=HASH(0x9456188)] [foo] [1]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: add: 127.0.0.1:10007 - 1288727994.11859.foo - 1
C [add]: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
T: ->get to verify ->add is get ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: get: 127.0.0.1:10007 - 1288727994.11859.foo
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [get]: [foo]
C [get]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945bf50)] [] [Memcached::Client::Connection=HASH(0x9456188)] [foo]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: get: 127.0.0.1:10007 - 1288727994.11859.foo
C [get]: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C: get - result {
  '1288727994.11859.foo' => {
    cas => 20,
    data => '1',
    flags => 0
  }
}
T: ->incr without a key is incr ([]
)
C [incr]: using condvar
T: ->incr with a non-existent key is incr ([
  'bang'
]
)
S: Hash value is 11036, bucket # is 11, bucket value is 127.0.0.1:10005
M: incr: 127.0.0.1:10005 - 1288727994.11859.bang - 1
S: Hash value is 11036, bucket # is 11, bucket value is 127.0.0.1:10005
C [incr]: [bang]
C [__incr]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945be90)] [] [Memcached::Client::Connection=HASH(0x94618d0)] [bang]
C [127.0.0.1:10005]: queuing request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10005]: executing
P: incr: 127.0.0.1:10005 - 1288727994.11859.bang - 1
C [incr]: using condvar
C [127.0.0.1:10005]: done with request
C [127.0.0.1:10005]: checking for job
T: ->incr with an existing key is incr ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: incr: 127.0.0.1:10007 - 1288727994.11859.foo - 1
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [incr]: [foo]
C [__incr]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945f320)] [] [Memcached::Client::Connection=HASH(0x9456188)] [foo]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: incr: 127.0.0.1:10007 - 1288727994.11859.foo - 1
C [incr]: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
T: ->incr with an existing key and an amount is incr ([
  'foo',
  '72'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: incr: 127.0.0.1:10007 - 1288727994.11859.foo - 72
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [incr]: [foo] [72]
C [__incr]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945b6e0)] [] [Memcached::Client::Connection=HASH(0x9456188)] [foo] [72]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: incr: 127.0.0.1:10007 - 1288727994.11859.foo - 72
C [incr]: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
T: ->get to verify ->incr is get ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: get: 127.0.0.1:10007 - 1288727994.11859.foo
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [get]: [foo]
C [get]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945bdd0)] [] [Memcached::Client::Connection=HASH(0x9456188)] [foo]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: get: 127.0.0.1:10007 - 1288727994.11859.foo
C [get]: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C: get - result {
  '1288727994.11859.foo' => {
    cas => 22,
    data => '74',
    flags => 0
  }
}
T: ->decr without a key is decr ([]
)
C [decr]: using condvar
T: ->decr with a non-existent key is decr ([
  'bang'
]
)
S: Hash value is 11036, bucket # is 11, bucket value is 127.0.0.1:10005
M: decr: 127.0.0.1:10005 - 1288727994.11859.bang - 1
S: Hash value is 11036, bucket # is 11, bucket value is 127.0.0.1:10005
C [decr]: [bang]
C [__decr]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945f820)] [] [Memcached::Client::Connection=HASH(0x94618d0)] [bang]
C [127.0.0.1:10005]: queuing request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10005]: executing
P: decr: 127.0.0.1:10005 - 1288727994.11859.bang - 1
C [decr]: using condvar
C [127.0.0.1:10005]: done with request
C [127.0.0.1:10005]: checking for job
T: ->decr with an existing key is decr ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: decr: 127.0.0.1:10007 - 1288727994.11859.foo - 1
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [decr]: [foo]
C [__decr]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945ba50)] [] [Memcached::Client::Connection=HASH(0x9456188)] [foo]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: decr: 127.0.0.1:10007 - 1288727994.11859.foo - 1
C [decr]: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
T: ->decr with an existing key is decr ([
  'foo',
  18
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: decr: 127.0.0.1:10007 - 1288727994.11859.foo - 18
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [decr]: [foo] [18]
C [__decr]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945f1d0)] [] [Memcached::Client::Connection=HASH(0x9456188)] [foo] [18]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: decr: 127.0.0.1:10007 - 1288727994.11859.foo - 18
C [decr]: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
T: ->get to verify ->decr is get ([
  'foo'
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: get: 127.0.0.1:10007 - 1288727994.11859.foo
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C [get]: [foo]
C [get]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945f0c0)] [] [Memcached::Client::Connection=HASH(0x9456188)] [foo]
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: get: 127.0.0.1:10007 - 1288727994.11859.foo
C [get]: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C: get - result {
  '1288727994.11859.foo' => {
    cas => 24,
    data => '55',
    flags => 0
  }
}
T: ->get with all keys set so far is get_multi ([
  [
    'bar',
    'foo'
  ]
]
)
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727994.11859.bar
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: get: 127.0.0.1:10007 - 1288727994.11859.foo
C: calling __get_multi - [
  [
    'bar',
    'foo'
  ]
]
C [get_multi]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945ec30)] [] [ARRAY(0x945ec00)]
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C: get 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: get: 127.0.0.1:10007 - 1288727994.11859.foo
C: get 127.0.0.1:10008
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727994.11859.bar
C: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C: get - result {
  '1288727994.11859.foo' => {
    cas => 24,
    data => '55',
    flags => 0
  }
}
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727994.11859.bar' => {
    cas => 8,
    data => 'gondolagorp',
    flags => 0
  }
}
T: ->incr_multi with various keys is incr_multi ([
  [
    [
      'foo'
    ]
  ]
]
)
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: incr: 127.0.0.1:10007 - 1288727994.11859.foo - 1
C: calling __incr_multi - [
  [
    [
      'foo'
    ]
  ]
]
C [__incr]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945f240)] [] [ARRAY(0x945eb30)]
Begin on command CV to establish callback
Tuples are [
  [
    'foo'
  ]
]
Tuple is [
  'foo'
]
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
keys is foo, server is 127.0.0.1:10007
C: incr 127.0.0.1:10007
Begin on command CV before enqueue
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: incr: 127.0.0.1:10007 - 1288727994.11859.foo - 1
End on command CV 
C: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
End on command CV from server CV
T: ->incr_multi with various keys is incr_multi ([
  [
    [
      'braga',
      1,
      17
    ],
    [
      'foo',
      7
    ]
  ]
]
)
S: Hash value is 19170, bucket # is 18, bucket value is 127.0.0.1:10009
M: incr: 127.0.0.1:10009 - 1288727994.11859.braga - 1
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: incr: 127.0.0.1:10007 - 1288727994.11859.foo - 7
C: calling __incr_multi - [
  [
    [
      'braga',
      1,
      17
    ],
    [
      'foo',
      7
    ]
  ]
]
C [__incr]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945ea10)] [] [ARRAY(0x945ec20)]
Begin on command CV to establish callback
Tuples are [
  [
    'braga',
    1,
    17
  ],
  [
    'foo',
    7
  ]
]
Tuple is [
  'braga',
  1,
  17
]
S: Hash value is 19170, bucket # is 18, bucket value is 127.0.0.1:10009
keys is braga, server is 127.0.0.1:10009
C: incr 127.0.0.1:10009
Begin on command CV before enqueue
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: incr: 127.0.0.1:10009 - 1288727994.11859.braga - 1
Tuple is [
  'foo',
  7
]
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
keys is foo, server is 127.0.0.1:10007
C: incr 127.0.0.1:10007
Begin on command CV before enqueue
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: incr: 127.0.0.1:10007 - 1288727994.11859.foo - 7
End on command CV 
C: using condvar
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
End on command CV from server CV
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
End on command CV from server CV
T: ->decr_multi with various keys is decr_multi ([
  [
    [
      'braga',
      3
    ],
    [
      'bartinate',
      7,
      33
    ]
  ]
]
)
S: Hash value is 19170, bucket # is 18, bucket value is 127.0.0.1:10009
M: decr: 127.0.0.1:10009 - 1288727994.11859.braga - 3
S: Hash value is 23207, bucket # is 2, bucket value is 127.0.0.1:10001
C: calling __decr_multi - [
  [
    [
      'braga',
      3
    ],
    [
      'bartinate',
      7,
      33
    ]
  ]
]
C [__decr]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945f2f0)] [] [ARRAY(0x945f2d0)]
Begin on command CV to establish callback
Tuples are [
  [
    'braga',
    3
  ],
  [
    'bartinate',
    7,
    33
  ]
]
Tuple is [
  'braga',
  3
]
S: Hash value is 19170, bucket # is 18, bucket value is 127.0.0.1:10009
keys is braga, server is 127.0.0.1:10009
C: decr 127.0.0.1:10009
Begin on command CV before enqueue
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: decr: 127.0.0.1:10009 - 1288727994.11859.braga - 3
Tuple is [
  'bartinate',
  7,
  33
]
S: Hash value is 23207, bucket # is 2, bucket value is 127.0.0.1:10001
keys is bartinate, server is 127.0.0.1:10001
C: decr 127.0.0.1:10001
Begin on command CV before enqueue
C [127.0.0.1:10001]: queuing request
C [127.0.0.1:10001]: checking for job
C [127.0.0.1:10001]: executing
P: decr: 127.0.0.1:10001 - 1288727994.11859.bartinate - 7
End on command CV 
C: using condvar
C [127.0.0.1:10001]: fatal error Broken pipe
C [connect]: Done connecting 127.0.0.1:10001
C [127.0.0.1:10001]: failing requests
C [127.0.0.1:10001]: failing request {
  failback => sub { "DUMMY" },
  request => sub { "DUMMY" }
}
End on command CV from error callback
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
End on command CV from server CV
T: ->flush_all to clear servers is flush_all ([]
)
M: flush_all: 127.0.0.1:10003
M: flush_all: 127.0.0.1:10007
M: flush_all: 127.0.0.1:10004
M: flush_all: 127.0.0.1:10002
M: flush_all: 127.0.0.1:10009
M: flush_all: 127.0.0.1:10006
M: flush_all: 127.0.0.1:10005
M: flush_all: 127.0.0.1:10008
C [flush_all]: enqueuing to 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
C [flush_all]: enqueuing to 127.0.0.1:10004
C [127.0.0.1:10004]: queuing request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10004]: executing
C [flush_all]: enqueuing to 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
C [flush_all]: enqueuing to 127.0.0.1:10002
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
C [flush_all]: enqueuing to 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
C [flush_all]: enqueuing to 127.0.0.1:10005
C [127.0.0.1:10005]: queuing request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10005]: executing
C [flush_all]: enqueuing to 127.0.0.1:10006
C [127.0.0.1:10006]: queuing request
C [127.0.0.1:10006]: checking for job
C [127.0.0.1:10006]: executing
C [flush_all]: enqueuing to 127.0.0.1:10008
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
C [flush_all]: enqueuing to 127.0.0.1:10001
C [127.0.0.1:10001]: connecting to [127.0.0.1:10001]
C [127.0.0.1:10001]: preparing handle
C [127.0.0.1:10001]: queuing request
C [127.0.0.1:10001]: checking for job
C [127.0.0.1:10001]: executing
C: using condvar
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10006]: done with request
C [127.0.0.1:10006]: checking for job
C [127.0.0.1:10005]: done with request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10002]: done with request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10004]: done with request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10001]: fatal error Connection refused
C [127.0.0.1:10001]: failing requests
C [127.0.0.1:10001]: failing request {
  failback => sub { "DUMMY" },
  request => sub { "DUMMY" }
}
T: ->get with all keys set so far is get_multi ([
  [
    'bar',
    'foo'
  ]
]
)
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727994.11859.bar
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
M: get: 127.0.0.1:10007 - 1288727994.11859.foo
C: calling __get_multi - [
  [
    'bar',
    'foo'
  ]
]
C [get_multi]: [Memcached::Client=HASH(0x939fa40)] [AnyEvent::CondVar=HASH(0x945ed40)] [] [ARRAY(0x945f270)]
S: Hash value is 22088, bucket # is 17, bucket value is 127.0.0.1:10008
S: Hash value is 11460, bucket # is 15, bucket value is 127.0.0.1:10007
C: get 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: get: 127.0.0.1:10007 - 1288727994.11859.foo
C: get 127.0.0.1:10008
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727994.11859.bar
C: using condvar
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C: get - result {}
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {}
Done with Traditional/Binary sync
Checking port 10001 for existing process
Using port 10001
Fork successful, pid 11922
Checking 127.0.0.1:10001
running Traditional/Text async
C: new - {
  namespace => '1288727995.11859.',
  protocol => 'Text',
  selector => 'Traditional',
  servers => [
    [
      '127.0.0.1:10001',
      3
    ],
    [
      '127.0.0.1:10002',
      2
    ],
    [
      '127.0.0.1:10003',
      2
    ],
    [
      '127.0.0.1:10004',
      2
    ],
    [
      '127.0.0.1:10005',
      3
    ],
    [
      '127.0.0.1:10006',
      3
    ],
    '127.0.0.1:10007',
    [
      '127.0.0.1:10008',
      2
    ],
    [
      '127.0.0.1:10009',
      3
    ]
  ]
}
S: Setting server list to [
  [
    '127.0.0.1:10001',
    3
  ],
  [
    '127.0.0.1:10002',
    2
  ],
  [
    '127.0.0.1:10003',
    2
  ],
  [
    '127.0.0.1:10004',
    2
  ],
  [
    '127.0.0.1:10005',
    3
  ],
  [
    '127.0.0.1:10006',
    3
  ],
  '127.0.0.1:10007',
  [
    '127.0.0.1:10008',
    2
  ],
  [
    '127.0.0.1:10009',
    3
  ]
]
S: Bucket list is [
  '127.0.0.1:10001',
  '127.0.0.1:10001',
  '127.0.0.1:10001',
  '127.0.0.1:10002',
  '127.0.0.1:10002',
  '127.0.0.1:10003',
  '127.0.0.1:10003',
  '127.0.0.1:10004',
  '127.0.0.1:10004',
  '127.0.0.1:10005',
  '127.0.0.1:10005',
  '127.0.0.1:10005',
  '127.0.0.1:10006',
  '127.0.0.1:10006',
  '127.0.0.1:10006',
  '127.0.0.1:10007',
  '127.0.0.1:10008',
  '127.0.0.1:10008',
  '127.0.0.1:10009',
  '127.0.0.1:10009',
  '127.0.0.1:10009'
]
, bucket count is 21
Creating connection for 127.0.0.1:10003
Creating connection for 127.0.0.1:10007
Creating connection for 127.0.0.1:10004
Creating connection for 127.0.0.1:10002
Creating connection for 127.0.0.1:10009
Creating connection for 127.0.0.1:10006
Creating connection for 127.0.0.1:10005
Creating connection for 127.0.0.1:10008
Creating connection for 127.0.0.1:10001
C: Done creating object
S: Setting server list to [
  [
    '127.0.0.1:10001',
    3
  ],
  [
    '127.0.0.1:10002',
    2
  ],
  [
    '127.0.0.1:10003',
    2
  ],
  [
    '127.0.0.1:10004',
    2
  ],
  [
    '127.0.0.1:10005',
    3
  ],
  [
    '127.0.0.1:10006',
    3
  ],
  '127.0.0.1:10007',
  [
    '127.0.0.1:10008',
    2
  ],
  [
    '127.0.0.1:10009',
    3
  ]
]
S: Bucket list is [
  '127.0.0.1:10001',
  '127.0.0.1:10001',
  '127.0.0.1:10001',
  '127.0.0.1:10002',
  '127.0.0.1:10002',
  '127.0.0.1:10003',
  '127.0.0.1:10003',
  '127.0.0.1:10004',
  '127.0.0.1:10004',
  '127.0.0.1:10005',
  '127.0.0.1:10005',
  '127.0.0.1:10005',
  '127.0.0.1:10006',
  '127.0.0.1:10006',
  '127.0.0.1:10006',
  '127.0.0.1:10007',
  '127.0.0.1:10008',
  '127.0.0.1:10008',
  '127.0.0.1:10009',
  '127.0.0.1:10009',
  '127.0.0.1:10009'
]
, bucket count is 21
Mock cluster is bless( {
  hash_namespace => 1,
  namespace => '1288727995.11859.',
  selector => bless( {
    bucketcount => 21,
    buckets => [
      '127.0.0.1:10001',
      '127.0.0.1:10001',
      '127.0.0.1:10001',
      '127.0.0.1:10002',
      '127.0.0.1:10002',
      '127.0.0.1:10003',
      '127.0.0.1:10003',
      '127.0.0.1:10004',
      '127.0.0.1:10004',
      '127.0.0.1:10005',
      '127.0.0.1:10005',
      '127.0.0.1:10005',
      '127.0.0.1:10006',
      '127.0.0.1:10006',
      '127.0.0.1:10006',
      '127.0.0.1:10007',
      '127.0.0.1:10008',
      '127.0.0.1:10008',
      '127.0.0.1:10009',
      '127.0.0.1:10009',
      '127.0.0.1:10009'
    ]
  }, 'Memcached::Client::Selector::Traditional' ),
  servers => {
    '127.0.0.1:10001' => {},
    '127.0.0.1:10002' => {},
    '127.0.0.1:10003' => {},
    '127.0.0.1:10004' => {},
    '127.0.0.1:10005' => {},
    '127.0.0.1:10006' => {},
    '127.0.0.1:10007' => {},
    '127.0.0.1:10008' => {},
    '127.0.0.1:10009' => {}
  },
  version => '1.4.5'
}, 't::Memcached::Mock' )
Choice is #7, 127.0.0.1:10008
T: running Traditional/Text async
T: ->connect is connect ([
  1
]
)
C [connect]: Starting connection
C [connect]: Found callback
C [connect]: Connecting 127.0.0.1:10003
C [127.0.0.1:10003]: connecting to [127.0.0.1:10003]
C [127.0.0.1:10003]: preparing handle
C [connect]: Connecting 127.0.0.1:10004
C [127.0.0.1:10004]: connecting to [127.0.0.1:10004]
C [127.0.0.1:10004]: preparing handle
C [connect]: Connecting 127.0.0.1:10007
C [127.0.0.1:10007]: connecting to [127.0.0.1:10007]
C [127.0.0.1:10007]: preparing handle
C [connect]: Connecting 127.0.0.1:10002
C [127.0.0.1:10002]: connecting to [127.0.0.1:10002]
C [127.0.0.1:10002]: preparing handle
C [connect]: Connecting 127.0.0.1:10009
C [127.0.0.1:10009]: connecting to [127.0.0.1:10009]
C [127.0.0.1:10009]: preparing handle
C [connect]: Connecting 127.0.0.1:10005
C [127.0.0.1:10005]: connecting to [127.0.0.1:10005]
C [127.0.0.1:10005]: preparing handle
C [connect]: Connecting 127.0.0.1:10006
C [127.0.0.1:10006]: connecting to [127.0.0.1:10006]
C [127.0.0.1:10006]: preparing handle
C [connect]: Connecting 127.0.0.1:10008
C [127.0.0.1:10008]: connecting to [127.0.0.1:10008]
C [127.0.0.1:10008]: preparing handle
C [connect]: Connecting 127.0.0.1:10001
C [127.0.0.1:10001]: connecting to [127.0.0.1:10001]
C [127.0.0.1:10001]: preparing handle
C: using callback
C [127.0.0.1:10001]: connected
C [connect]: Done connecting 127.0.0.1:10001
C [127.0.0.1:10001]: checking for job
C [127.0.0.1:10006]: connected
C [connect]: Done connecting 127.0.0.1:10006
C [127.0.0.1:10006]: checking for job
C [127.0.0.1:10005]: connected
C [connect]: Done connecting 127.0.0.1:10005
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10009]: connected
C [connect]: Done connecting 127.0.0.1:10009
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10002]: connected
C [connect]: Done connecting 127.0.0.1:10002
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10007]: connected
C [connect]: Done connecting 127.0.0.1:10007
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10004]: connected
C [connect]: Done connecting 127.0.0.1:10004
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10003]: connected
C [connect]: Done connecting 127.0.0.1:10003
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10008]: connected
C [connect]: Done connecting 127.0.0.1:10008
T: Checking for version on all servers is version ([]
)
C [version]: Found callback
C [version]: enqueuing to 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: version: 127.0.0.1:10003
P [127.0.0.1:10003]: > version
C [version]: enqueuing to 127.0.0.1:10004
C [127.0.0.1:10004]: queuing request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10004]: executing
P: version: 127.0.0.1:10004
P [127.0.0.1:10004]: > version
C [version]: enqueuing to 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: version: 127.0.0.1:10007
P [127.0.0.1:10007]: > version
C [version]: enqueuing to 127.0.0.1:10002
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
P: version: 127.0.0.1:10002
P [127.0.0.1:10002]: > version
C [version]: enqueuing to 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: version: 127.0.0.1:10009
P [127.0.0.1:10009]: > version
C [version]: enqueuing to 127.0.0.1:10005
C [127.0.0.1:10005]: queuing request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10005]: executing
P: version: 127.0.0.1:10005
P [127.0.0.1:10005]: > version
C [version]: enqueuing to 127.0.0.1:10006
C [127.0.0.1:10006]: queuing request
C [127.0.0.1:10006]: checking for job
C [127.0.0.1:10006]: executing
P: version: 127.0.0.1:10006
P [127.0.0.1:10006]: > version
C [version]: enqueuing to 127.0.0.1:10008
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: version: 127.0.0.1:10008
P [127.0.0.1:10008]: > version
C [version]: enqueuing to 127.0.0.1:10001
C [127.0.0.1:10001]: queuing request
C [127.0.0.1:10001]: checking for job
C [127.0.0.1:10001]: executing
P: version: 127.0.0.1:10001
P [127.0.0.1:10001]: > version
C: using callback
P [127.0.0.1:10001]: < VERSION 1.4.5
C [127.0.0.1:10001]: done with request
C [127.0.0.1:10001]: checking for job
P [127.0.0.1:10006]: < VERSION 1.4.5
C [127.0.0.1:10006]: done with request
C [127.0.0.1:10006]: checking for job
P [127.0.0.1:10005]: < VERSION 1.4.5
C [127.0.0.1:10005]: done with request
C [127.0.0.1:10005]: checking for job
P [127.0.0.1:10009]: < VERSION 1.4.5
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
P [127.0.0.1:10002]: < VERSION 1.4.5
C [127.0.0.1:10002]: done with request
C [127.0.0.1:10002]: checking for job
P [127.0.0.1:10007]: < VERSION 1.4.5
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
P [127.0.0.1:10004]: < VERSION 1.4.5
C [127.0.0.1:10004]: done with request
C [127.0.0.1:10004]: checking for job
P [127.0.0.1:10003]: < VERSION 1.4.5
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
P [127.0.0.1:10008]: < VERSION 1.4.5
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
M: version: 127.0.0.1:10003
M: version: 127.0.0.1:10007
M: version: 127.0.0.1:10004
M: version: 127.0.0.1:10002
M: version: 127.0.0.1:10009
M: version: 127.0.0.1:10006
M: version: 127.0.0.1:10005
M: version: 127.0.0.1:10008
M: version: 127.0.0.1:10001
T: ->set without a key is set ([]
)
C [set]: Found callback
T: ->set without a value is set ([
  'foo'
]
)
C [set]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [set]: [foo]
C [__set]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x9487de0)] [undef] [Memcached::Client::Connection=HASH(0x9484018)] [foo]
T: ->set with a value is set ([
  'foo',
  'bar'
]
)
C [set]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [set]: [foo] [bar]
C [__set]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x9487510)] [undef] [Memcached::Client::Connection=HASH(0x9484018)] [foo] [bar]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: set: 127.0.0.1:10003 - 1288727995.11859.foo - bar
C [set]: using callback
C [set]: using callback
C [set]: using callback
P [127.0.0.1:10003]: < STORED
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: set: 127.0.0.1:10003 - 1288727995.11859.foo - bar
T: ->set with a pre-hashed key is set ([
  [
    '37',
    'llama'
  ],
  'bar'
]
)
C [set]: Found callback
S: Hash value is 37, bucket # is 16, bucket value is 127.0.0.1:10008
C [set]: [ARRAY(0x9461550)] [bar]
C [__set]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x948e6e0)] [undef] [Memcached::Client::Connection=HASH(0x9484058)] [ARRAY(0x9461550)] [bar]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: set: 127.0.0.1:10008 - 1288727995.11859.llama - bar
C [set]: using callback
P [127.0.0.1:10008]: < STORED
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
S: Hash value is 37, bucket # is 16, bucket value is 127.0.0.1:10008
M: set: 127.0.0.1:10008 - 1288727995.11859.llama - bar
T: ->set_multi with various keys is set_multi ([
  [
    [
      'teatime',
      3
    ],
    [
      'bagman',
      'ludo'
    ]
  ]
]
)
C [set]: Found callback
C: calling __set_multi - [
  [
    [
      'teatime',
      3
    ],
    [
      'bagman',
      'ludo'
    ]
  ]
]
C [__set]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x945b560)] [undef] [ARRAY(0x945f430)]
Tuples are [
  [
    'teatime',
    3
  ],
  [
    'bagman',
    'ludo'
  ]
]
Tuple is [
  'teatime',
  3
]
S: Hash value is 25712, bucket # is 8, bucket value is 127.0.0.1:10004
C: set 127.0.0.1:10004
C [127.0.0.1:10004]: queuing request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10004]: executing
P: set: 127.0.0.1:10004 - 1288727995.11859.teatime - 3
Tuple is [
  'bagman',
  'ludo'
]
S: Hash value is 13863, bucket # is 3, bucket value is 127.0.0.1:10002
C: set 127.0.0.1:10002
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
P: set: 127.0.0.1:10002 - 1288727995.11859.bagman - ludo
C: using callback
P [127.0.0.1:10004]: < STORED
C [127.0.0.1:10004]: done with request
C [127.0.0.1:10004]: checking for job
P [127.0.0.1:10002]: < STORED
C [127.0.0.1:10002]: done with request
C [127.0.0.1:10002]: checking for job
S: Hash value is 25712, bucket # is 8, bucket value is 127.0.0.1:10004
M: set: 127.0.0.1:10004 - 1288727995.11859.teatime - 3
S: Hash value is 13863, bucket # is 3, bucket value is 127.0.0.1:10002
M: set: 127.0.0.1:10002 - 1288727995.11859.bagman - ludo
T: ->add without a key is add ([]
)
C [add]: Found callback
T: ->add without a value is add ([
  'foo'
]
)
C [add]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [add]: [foo]
C [__add]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x9487340)] [undef] [Memcached::Client::Connection=HASH(0x9484018)] [foo]
T: ->add with a value is add ([
  'bar',
  'baz'
]
)
C [add]: Found callback
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
C [add]: [bar] [baz]
C [__add]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x94847d8)] [undef] [Memcached::Client::Connection=HASH(0x9484058)] [bar] [baz]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: add: 127.0.0.1:10008 - 1288727995.11859.bar - baz
C [add]: using callback
C [add]: using callback
C [add]: using callback
P [127.0.0.1:10008]: < STORED
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
M: add: 127.0.0.1:10008 - 1288727995.11859.bar - baz
T: ->add with an existing value is add ([
  'bar',
  'foo'
]
)
C [add]: Found callback
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
C [add]: [bar] [foo]
C [__add]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x948c2b8)] [undef] [Memcached::Client::Connection=HASH(0x9484058)] [bar] [foo]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: add: 127.0.0.1:10008 - 1288727995.11859.bar - foo
C [add]: using callback
P [127.0.0.1:10008]: < NOT_STORED
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
M: add: 127.0.0.1:10008 - 1288727995.11859.bar - foo
T: ->set_multi with various pre-existing keys is add_multi ([
  [
    [
      'teatime',
      3
    ],
    [
      'bagman',
      'ludo'
    ]
  ]
]
)
C [add]: Found callback
C: calling __add_multi - [
  [
    [
      'teatime',
      3
    ],
    [
      'bagman',
      'ludo'
    ]
  ]
]
C [__add]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x948fe58)] [undef] [ARRAY(0x94872f0)]
Tuples are [
  [
    'teatime',
    3
  ],
  [
    'bagman',
    'ludo'
  ]
]
Tuple is [
  'teatime',
  3
]
S: Hash value is 25712, bucket # is 8, bucket value is 127.0.0.1:10004
C: add 127.0.0.1:10004
C [127.0.0.1:10004]: queuing request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10004]: executing
P: add: 127.0.0.1:10004 - 1288727995.11859.teatime - 3
Tuple is [
  'bagman',
  'ludo'
]
S: Hash value is 13863, bucket # is 3, bucket value is 127.0.0.1:10002
C: add 127.0.0.1:10002
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
P: add: 127.0.0.1:10002 - 1288727995.11859.bagman - ludo
C: using callback
P [127.0.0.1:10004]: < NOT_STORED
C [127.0.0.1:10004]: done with request
C [127.0.0.1:10004]: checking for job
P [127.0.0.1:10002]: < NOT_STORED
C [127.0.0.1:10002]: done with request
C [127.0.0.1:10002]: checking for job
S: Hash value is 25712, bucket # is 8, bucket value is 127.0.0.1:10004
M: add: 127.0.0.1:10004 - 1288727995.11859.teatime - 3
S: Hash value is 13863, bucket # is 3, bucket value is 127.0.0.1:10002
M: add: 127.0.0.1:10002 - 1288727995.11859.bagman - ludo
T: ->set_multi with various keys is add_multi ([
  [
    [
      'porridge',
      'salty'
    ],
    [
      'complex',
      'simple'
    ],
    [
      'bagman',
      'horace'
    ]
  ]
]
)
C [add]: Found callback
C: calling __add_multi - [
  [
    [
      'porridge',
      'salty'
    ],
    [
      'complex',
      'simple'
    ],
    [
      'bagman',
      'horace'
    ]
  ]
]
C [__add]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x94594f8)] [undef] [ARRAY(0x948e810)]
Tuples are [
  [
    'porridge',
    'salty'
  ],
  [
    'complex',
    'simple'
  ],
  [
    'bagman',
    'horace'
  ]
]
Tuple is [
  'porridge',
  'salty'
]
S: Hash value is 21333, bucket # is 18, bucket value is 127.0.0.1:10009
C: add 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: add: 127.0.0.1:10009 - 1288727995.11859.porridge - salty
Tuple is [
  'complex',
  'simple'
]
S: Hash value is 20, bucket # is 20, bucket value is 127.0.0.1:10009
C: add 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
Tuple is [
  'bagman',
  'horace'
]
S: Hash value is 13863, bucket # is 3, bucket value is 127.0.0.1:10002
C: add 127.0.0.1:10002
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
P: add: 127.0.0.1:10002 - 1288727995.11859.bagman - horace
C: using callback
P [127.0.0.1:10009]: < STORED
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: add: 127.0.0.1:10009 - 1288727995.11859.complex - simple
P [127.0.0.1:10002]: < NOT_STORED
C [127.0.0.1:10002]: done with request
C [127.0.0.1:10002]: checking for job
P [127.0.0.1:10009]: < STORED
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 21333, bucket # is 18, bucket value is 127.0.0.1:10009
M: add: 127.0.0.1:10009 - 1288727995.11859.porridge - salty
S: Hash value is 20, bucket # is 20, bucket value is 127.0.0.1:10009
M: add: 127.0.0.1:10009 - 1288727995.11859.complex - simple
S: Hash value is 13863, bucket # is 3, bucket value is 127.0.0.1:10002
M: add: 127.0.0.1:10002 - 1288727995.11859.bagman - horace
T: ->add with a pre-hashed key is set ([
  [
    '19',
    'ding-dong'
  ],
  'bar'
]
)
C [set]: Found callback
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [set]: [ARRAY(0x9475000)] [bar]
C [__set]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x948ddb0)] [undef] [Memcached::Client::Connection=HASH(0x9464e70)] [ARRAY(0x9475000)] [bar]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: set: 127.0.0.1:10009 - 1288727995.11859.ding-dong - bar
C [set]: using callback
P [127.0.0.1:10009]: < STORED
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: set: 127.0.0.1:10009 - 1288727995.11859.ding-dong - bar
T: ->get without a key is get ([]
)
C [get]: Found callback
T: ->get a non-existant value is get ([
  'bang'
]
)
C [get]: Found callback
S: Hash value is 12473, bucket # is 20, bucket value is 127.0.0.1:10009
C [get]: [bang]
C [get]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x947ee60)] [undef] [Memcached::Client::Connection=HASH(0x9464e70)] [bang]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: get: 127.0.0.1:10009 - 1288727995.11859.bang
C [get]: using callback
C [get]: using callback
P [127.0.0.1:10009]: < END
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 12473, bucket # is 20, bucket value is 127.0.0.1:10009
M: get: 127.0.0.1:10009 - 1288727995.11859.bang
T: ->get an existing value is get ([
  'bar'
]
)
C [get]: Found callback
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
C [get]: [bar]
C [get]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x93c61d0)] [undef] [Memcached::Client::Connection=HASH(0x9484058)] [bar]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727995.11859.bar
C [get]: using callback
P [127.0.0.1:10008]: < VALUE 1288727995.11859.bar 0 3
P [127.0.0.1:10008]: < baz
P [127.0.0.1:10008]: < 
P [127.0.0.1:10008]: < END
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727995.11859.bar' => {
    cas => undef,
    data => 'baz',
    flags => '0'
  }
}
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727995.11859.bar
T: ->get a value with a pre-hashed key is get ([
  [
    '19',
    'ding-dong'
  ]
]
)
C [get]: Found callback
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [get]: [ARRAY(0x903ede8)]
C [get]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x948bcf8)] [undef] [Memcached::Client::Connection=HASH(0x9464e70)] [ARRAY(0x903ede8)]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: get: 127.0.0.1:10009 - 1288727995.11859.ding-dong
C [get]: using callback
P [127.0.0.1:10009]: < VALUE 1288727995.11859.ding-dong 0 3
P [127.0.0.1:10009]: < bar
P [127.0.0.1:10009]: < 
P [127.0.0.1:10009]: < END
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C: get - result {
  '1288727995.11859.ding-dong' => {
    cas => undef,
    data => 'bar',
    flags => '0'
  }
}
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: get: 127.0.0.1:10009 - 1288727995.11859.ding-dong
T: ->get_multi without a list is get_multi ([]
)
C [get]: Found callback
C: calling __get_multi - []
C [get_multi]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x9484348)] [undef]
T: ->get_multi with an empty list is get_multi ([
  []
]
)
C [get]: Found callback
C: calling __get_multi - [
  []
]
C [get_multi]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x947f8a0)] [undef] [ARRAY(0x948e5f0)]
T: ->get with all keys set so far is get_multi ([
  [
    'bar',
    'foo',
    'porridge'
  ]
]
)
C [get]: Found callback
C: calling __get_multi - [
  [
    'bar',
    'foo',
    'porridge'
  ]
]
C [get_multi]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x94846a8)] [undef] [ARRAY(0x948e6f0)]
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
S: Hash value is 21333, bucket # is 18, bucket value is 127.0.0.1:10009
C: get 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: get: 127.0.0.1:10003 - 1288727995.11859.foo
C: get 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: get: 127.0.0.1:10009 - 1288727995.11859.porridge
C: get 127.0.0.1:10008
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727995.11859.bar
C: using callback
C: using callback
C: using callback
P [127.0.0.1:10008]: < VALUE 1288727995.11859.bar 0 3
P [127.0.0.1:10008]: < baz
P [127.0.0.1:10008]: < 
P [127.0.0.1:10008]: < END
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727995.11859.bar' => {
    cas => undef,
    data => 'baz',
    flags => '0'
  }
}
P [127.0.0.1:10003]: < VALUE 1288727995.11859.foo 0 3
P [127.0.0.1:10003]: < bar
P [127.0.0.1:10003]: < 
P [127.0.0.1:10003]: < END
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C: get - result {
  '1288727995.11859.foo' => {
    cas => undef,
    data => 'bar',
    flags => '0'
  }
}
P [127.0.0.1:10009]: < VALUE 1288727995.11859.porridge 0 5
P [127.0.0.1:10009]: < salty
P [127.0.0.1:10009]: < 
P [127.0.0.1:10009]: < END
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C: get - result {
  '1288727995.11859.porridge' => {
    cas => undef,
    data => 'salty',
    flags => '0'
  }
}
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727995.11859.bar
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: get: 127.0.0.1:10003 - 1288727995.11859.foo
S: Hash value is 21333, bucket # is 18, bucket value is 127.0.0.1:10009
M: get: 127.0.0.1:10009 - 1288727995.11859.porridge
T: ->get with all keys set so far is get_multi ([
  [
    [
      '37',
      'llama'
    ],
    'bar',
    'foo'
  ]
]
)
C [get]: Found callback
C: calling __get_multi - [
  [
    [
      '37',
      'llama'
    ],
    'bar',
    'foo'
  ]
]
C [get_multi]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x9484a18)] [undef] [ARRAY(0x9490408)]
S: Hash value is 37, bucket # is 16, bucket value is 127.0.0.1:10008
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C: get 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: get: 127.0.0.1:10003 - 1288727995.11859.foo
C: get 127.0.0.1:10008
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727995.11859.llama
P: get: 127.0.0.1:10008 - 1288727995.11859.bar
C: using callback
P [127.0.0.1:10003]: < VALUE 1288727995.11859.foo 0 3
P [127.0.0.1:10003]: < bar
P [127.0.0.1:10003]: < 
P [127.0.0.1:10003]: < END
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C: get - result {
  '1288727995.11859.foo' => {
    cas => undef,
    data => 'bar',
    flags => '0'
  }
}
P [127.0.0.1:10008]: < VALUE 1288727995.11859.llama 0 3
P [127.0.0.1:10008]: < bar
P [127.0.0.1:10008]: < 
P [127.0.0.1:10008]: < VALUE 1288727995.11859.bar 0 3
P [127.0.0.1:10008]: < baz
P [127.0.0.1:10008]: < 
P [127.0.0.1:10008]: < END
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727995.11859.bar' => {
    cas => undef,
    data => 'baz',
    flags => '0'
  },
  '1288727995.11859.llama' => {
    cas => undef,
    data => 'bar',
    flags => '0'
  }
}
S: Hash value is 37, bucket # is 16, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727995.11859.llama
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727995.11859.bar
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: get: 127.0.0.1:10003 - 1288727995.11859.foo
T: ->replace without a key is replace ([]
)
C [replace]: Found callback
T: ->replace without a value is replace ([
  'foo'
]
)
C [replace]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [replace]: [foo]
C [__replace]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x948e060)] [undef] [Memcached::Client::Connection=HASH(0x9484018)] [foo]
T: ->replace with a non-existent value is replace ([
  'baz',
  'gorp'
]
)
C [replace]: Found callback
S: Hash value is 6429, bucket # is 3, bucket value is 127.0.0.1:10002
C [replace]: [baz] [gorp]
C [__replace]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x948dc30)] [undef] [Memcached::Client::Connection=HASH(0x9481b30)] [baz] [gorp]
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
P: replace: 127.0.0.1:10002 - 1288727995.11859.baz - gorp
C [replace]: using callback
C [replace]: using callback
C [replace]: using callback
P [127.0.0.1:10002]: < NOT_STORED
C [127.0.0.1:10002]: done with request
C [127.0.0.1:10002]: checking for job
S: Hash value is 6429, bucket # is 3, bucket value is 127.0.0.1:10002
M: replace: 127.0.0.1:10002 - 1288727995.11859.baz - gorp
T: ->replace with an existing value is replace ([
  'bar',
  'gondola'
]
)
C [replace]: Found callback
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
C [replace]: [bar] [gondola]
C [__replace]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x9475440)] [undef] [Memcached::Client::Connection=HASH(0x9484058)] [bar] [gondola]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: replace: 127.0.0.1:10008 - 1288727995.11859.bar - gondola
C [replace]: using callback
P [127.0.0.1:10008]: < STORED
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
M: replace: 127.0.0.1:10008 - 1288727995.11859.bar - gondola
T: ->replace_multi with various keys is replace_multi ([
  [
    [
      'porridge',
      'sweet'
    ],
    [
      'complex',
      'NP'
    ],
    [
      'ludo',
      'panopticon'
    ]
  ]
]
)
C [replace]: Found callback
C: calling __replace_multi - [
  [
    [
      'porridge',
      'sweet'
    ],
    [
      'complex',
      'NP'
    ],
    [
      'ludo',
      'panopticon'
    ]
  ]
]
C [__replace]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x947ec90)] [undef] [ARRAY(0x948e450)]
Tuples are [
  [
    'porridge',
    'sweet'
  ],
  [
    'complex',
    'NP'
  ],
  [
    'ludo',
    'panopticon'
  ]
]
Tuple is [
  'porridge',
  'sweet'
]
S: Hash value is 21333, bucket # is 18, bucket value is 127.0.0.1:10009
C: replace 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: replace: 127.0.0.1:10009 - 1288727995.11859.porridge - sweet
Tuple is [
  'complex',
  'NP'
]
S: Hash value is 20, bucket # is 20, bucket value is 127.0.0.1:10009
C: replace 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
Tuple is [
  'ludo',
  'panopticon'
]
S: Hash value is 16253, bucket # is 20, bucket value is 127.0.0.1:10009
C: replace 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C: using callback
P [127.0.0.1:10009]: < STORED
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: replace: 127.0.0.1:10009 - 1288727995.11859.complex - NP
P [127.0.0.1:10009]: < STORED
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: replace: 127.0.0.1:10009 - 1288727995.11859.ludo - panopticon
P [127.0.0.1:10009]: < NOT_STORED
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 21333, bucket # is 18, bucket value is 127.0.0.1:10009
M: replace: 127.0.0.1:10009 - 1288727995.11859.porridge - sweet
S: Hash value is 20, bucket # is 20, bucket value is 127.0.0.1:10009
M: replace: 127.0.0.1:10009 - 1288727995.11859.complex - NP
S: Hash value is 16253, bucket # is 20, bucket value is 127.0.0.1:10009
M: replace: 127.0.0.1:10009 - 1288727995.11859.ludo - panopticon
T: ->get to verify replacement is get ([
  'bar'
]
)
C [get]: Found callback
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
C [get]: [bar]
C [get]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x948db30)] [undef] [Memcached::Client::Connection=HASH(0x9484058)] [bar]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727995.11859.bar
C [get]: using callback
P [127.0.0.1:10008]: < VALUE 1288727995.11859.bar 0 7
P [127.0.0.1:10008]: < gondola
P [127.0.0.1:10008]: < 
P [127.0.0.1:10008]: < END
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727995.11859.bar' => {
    cas => undef,
    data => 'gondola',
    flags => '0'
  }
}
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727995.11859.bar
T: ->get a key that is too large and does not exist is get ([
  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
]
)
C [get]: Found callback
S: Hash value is 20907, bucket # is 12, bucket value is 127.0.0.1:10006
M: get: 127.0.0.1:10006 - 1288727995.11859.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
T: ->set a key that is too large and does not exist is set ([
  'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb',
  'lurch'
]
)
C [set]: Found callback
S: Hash value is 25671, bucket # is 9, bucket value is 127.0.0.1:10005
M: set: 127.0.0.1:10005 - 1288727995.11859.bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb - lurch
T: ->replace with a pre-hashed key and non-existent value is replace ([
  [
    '18',
    'ding-dong'
  ],
  'bar'
]
)
C [replace]: Found callback
S: Hash value is 18, bucket # is 18, bucket value is 127.0.0.1:10009
C [replace]: [ARRAY(0x947ef10)] [bar]
C [__replace]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x947f710)] [undef] [Memcached::Client::Connection=HASH(0x9464e70)] [ARRAY(0x947ef10)] [bar]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: replace: 127.0.0.1:10009 - 1288727995.11859.ding-dong - bar
C [replace]: using callback
C [set]: using callback
C [get]: using callback
P [127.0.0.1:10009]: < STORED
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 18, bucket # is 18, bucket value is 127.0.0.1:10009
M: replace: 127.0.0.1:10009 - 1288727995.11859.ding-dong - bar
Failing 127.0.0.1:10008
Pid is 11898
Trying TERM
Waitpid returned 11898
Deleted 127.0.0.1:10008, result bless( {
  hash_namespace => 1,
  namespace => '1288727995.11859.',
  selector => bless( {
    bucketcount => 21,
    buckets => [
      '127.0.0.1:10001',
      '127.0.0.1:10001',
      '127.0.0.1:10001',
      '127.0.0.1:10002',
      '127.0.0.1:10002',
      '127.0.0.1:10003',
      '127.0.0.1:10003',
      '127.0.0.1:10004',
      '127.0.0.1:10004',
      '127.0.0.1:10005',
      '127.0.0.1:10005',
      '127.0.0.1:10005',
      '127.0.0.1:10006',
      '127.0.0.1:10006',
      '127.0.0.1:10006',
      '127.0.0.1:10007',
      '127.0.0.1:10008',
      '127.0.0.1:10008',
      '127.0.0.1:10009',
      '127.0.0.1:10009',
      '127.0.0.1:10009'
    ]
  }, 'Memcached::Client::Selector::Traditional' ),
  servers => {
    '127.0.0.1:10001' => {},
    '127.0.0.1:10002' => {
      '1288727995.11859.bagman' => 'ludo'
    },
    '127.0.0.1:10003' => {
      '1288727995.11859.foo' => 'bar'
    },
    '127.0.0.1:10004' => {
      '1288727995.11859.teatime' => 3
    },
    '127.0.0.1:10005' => {},
    '127.0.0.1:10006' => {},
    '127.0.0.1:10007' => {},
    '127.0.0.1:10009' => {
      '1288727995.11859.complex' => 'NP',
      '1288727995.11859.ding-dong' => 'bar',
      '1288727995.11859.porridge' => 'sweet'
    }
  },
  version => '1.4.5'
}, 't::Memcached::Mock' )
T: ->replace with a pre-hashed key and an existing value is replace ([
  [
    '19',
    'ding-dong'
  ],
  'baz'
]
)
C [replace]: Found callback
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [replace]: [ARRAY(0x9474fb0)] [baz]
C [__replace]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x903ede8)] [undef] [Memcached::Client::Connection=HASH(0x9464e70)] [ARRAY(0x9474fb0)] [baz]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: replace: 127.0.0.1:10009 - 1288727995.11859.ding-dong - baz
C [replace]: using callback
P [127.0.0.1:10009]: < STORED
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: replace: 127.0.0.1:10009 - 1288727995.11859.ding-dong - baz
T: ->get a value with a pre-hashed key is get ([
  [
    '19',
    'ding-dong'
  ]
]
)
C [get]: Found callback
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [get]: [ARRAY(0x947f2e0)]
C [get]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x94901e8)] [undef] [Memcached::Client::Connection=HASH(0x9464e70)] [ARRAY(0x947f2e0)]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: get: 127.0.0.1:10009 - 1288727995.11859.ding-dong
C [get]: using callback
P [127.0.0.1:10009]: < VALUE 1288727995.11859.ding-dong 0 3
P [127.0.0.1:10009]: < baz
P [127.0.0.1:10009]: < 
P [127.0.0.1:10009]: < END
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C: get - result {
  '1288727995.11859.ding-dong' => {
    cas => undef,
    data => 'baz',
    flags => '0'
  }
}
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: get: 127.0.0.1:10009 - 1288727995.11859.ding-dong
T: ->append without a key is append ([]
)
C [append]: Found callback
T: ->append without a value is append ([
  'foo'
]
)
C [append]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [append]: [foo]
C [__append]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x9474dd0)] [undef] [Memcached::Client::Connection=HASH(0x9484018)] [foo]
T: ->append with a non-existent value is append ([
  'baz',
  'gorp'
]
)
C [append]: Found callback
S: Hash value is 6429, bucket # is 3, bucket value is 127.0.0.1:10002
C [append]: [baz] [gorp]
C [__append]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x94819e0)] [undef] [Memcached::Client::Connection=HASH(0x9481b30)] [baz] [gorp]
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
P: append: 127.0.0.1:10002 - 1288727995.11859.baz - gorp
C [append]: using callback
C [append]: using callback
C [append]: using callback
P [127.0.0.1:10002]: < NOT_STORED
C [127.0.0.1:10002]: done with request
C [127.0.0.1:10002]: checking for job
S: Hash value is 6429, bucket # is 3, bucket value is 127.0.0.1:10002
M: append: 127.0.0.1:10002 - 1288727995.11859.baz - gorp
T: ->append with an existing value is append ([
  'bar',
  'gorp'
]
)
C [append]: Found callback
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
C [append]: [bar] [gorp]
C [__append]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x9461ff0)] [undef] [Memcached::Client::Connection=HASH(0x9484058)] [bar] [gorp]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: append: 127.0.0.1:10008 - 1288727995.11859.bar - gorp
C [append]: using callback
C [127.0.0.1:10008]: fatal error Broken pipe
C [connect]: Done connecting 127.0.0.1:10008
C [127.0.0.1:10008]: failing requests
C [127.0.0.1:10008]: failing request {
  failback => bless( {
    _ae_cb => sub { "DUMMY" }
  }, 'AnyEvent::CondVar' ),
  request => sub { "DUMMY" }
}
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
T: ->append_multi with various keys is append_multi ([
  [
    [
      'porridge',
      ' and salty'
    ],
    [
      'complex',
      ' != P'
    ]
  ]
]
)
C [append]: Found callback
C: calling __append_multi - [
  [
    [
      'porridge',
      ' and salty'
    ],
    [
      'complex',
      ' != P'
    ]
  ]
]
C [__append]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x948fef8)] [undef] [ARRAY(0x93a4330)]
Tuples are [
  [
    'porridge',
    ' and salty'
  ],
  [
    'complex',
    ' != P'
  ]
]
Tuple is [
  'porridge',
  ' and salty'
]
S: Hash value is 21333, bucket # is 18, bucket value is 127.0.0.1:10009
C: append 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: append: 127.0.0.1:10009 - 1288727995.11859.porridge -  and salty
Tuple is [
  'complex',
  ' != P'
]
S: Hash value is 20, bucket # is 20, bucket value is 127.0.0.1:10009
C: append 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C: using callback
P [127.0.0.1:10009]: < STORED
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: append: 127.0.0.1:10009 - 1288727995.11859.complex -  != P
P [127.0.0.1:10009]: < STORED
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 21333, bucket # is 18, bucket value is 127.0.0.1:10009
M: append: 127.0.0.1:10009 - 1288727995.11859.porridge -  and salty
S: Hash value is 20, bucket # is 20, bucket value is 127.0.0.1:10009
M: append: 127.0.0.1:10009 - 1288727995.11859.complex -  != P
T: ->get to verify ->append is get ([
  'bar'
]
)
C [get]: Found callback
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
C [get]: [bar]
C [get]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x94617f0)] [undef] [Memcached::Client::Connection=HASH(0x9484058)] [bar]
C [127.0.0.1:10008]: connecting to [127.0.0.1:10008]
C [127.0.0.1:10008]: preparing handle
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727995.11859.bar
C [get]: using callback
C [127.0.0.1:10008]: fatal error Connection refused
C [127.0.0.1:10008]: failing requests
C [127.0.0.1:10008]: failing request {
  failback => bless( {
    _ae_cb => sub { "DUMMY" }
  }, 'AnyEvent::CondVar' ),
  request => sub { "DUMMY" }
}
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
T: ->append with a pre-hashed key and non-existent value is append ([
  [
    '18',
    'ding-dong'
  ],
  'flagon'
]
)
C [append]: Found callback
S: Hash value is 18, bucket # is 18, bucket value is 127.0.0.1:10009
C [append]: [ARRAY(0x9475550)] [flagon]
C [__append]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x947f1b0)] [undef] [Memcached::Client::Connection=HASH(0x9464e70)] [ARRAY(0x9475550)] [flagon]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: append: 127.0.0.1:10009 - 1288727995.11859.ding-dong - flagon
C [append]: using callback
P [127.0.0.1:10009]: < STORED
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 18, bucket # is 18, bucket value is 127.0.0.1:10009
M: append: 127.0.0.1:10009 - 1288727995.11859.ding-dong - flagon
T: ->append with a pre-hashed key and an existing value is append ([
  [
    '19',
    'ding-dong'
  ],
  'flagged'
]
)
C [append]: Found callback
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [append]: [ARRAY(0x94745b0)] [flagged]
C [__append]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x9452780)] [undef] [Memcached::Client::Connection=HASH(0x9464e70)] [ARRAY(0x94745b0)] [flagged]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: append: 127.0.0.1:10009 - 1288727995.11859.ding-dong - flagged
C [append]: using callback
P [127.0.0.1:10009]: < STORED
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: append: 127.0.0.1:10009 - 1288727995.11859.ding-dong - flagged
T: ->get a value with a pre-hashed key is get ([
  [
    '19',
    'ding-dong'
  ]
]
)
C [get]: Found callback
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [get]: [ARRAY(0x948be48)]
C [get]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x947efd0)] [undef] [Memcached::Client::Connection=HASH(0x9464e70)] [ARRAY(0x948be48)]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: get: 127.0.0.1:10009 - 1288727995.11859.ding-dong
C [get]: using callback
P [127.0.0.1:10009]: < VALUE 1288727995.11859.ding-dong 0 16
P [127.0.0.1:10009]: < bazflagonflagged
P [127.0.0.1:10009]: < 
P [127.0.0.1:10009]: < END
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C: get - result {
  '1288727995.11859.ding-dong' => {
    cas => undef,
    data => 'bazflagonflagged',
    flags => '0'
  }
}
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: get: 127.0.0.1:10009 - 1288727995.11859.ding-dong
T: ->prepend without a key is prepend ([]
)
C [prepend]: Found callback
T: ->prepend without a value is prepend ([
  'foo'
]
)
C [prepend]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [prepend]: [foo]
C [__prepend]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x9464e40)] [undef] [Memcached::Client::Connection=HASH(0x9484018)] [foo]
T: ->prepend with a non-existent value is prepend ([
  'baz',
  'gorp'
]
)
C [prepend]: Found callback
S: Hash value is 6429, bucket # is 3, bucket value is 127.0.0.1:10002
C [prepend]: [baz] [gorp]
C [__prepend]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x9474df0)] [undef] [Memcached::Client::Connection=HASH(0x9481b30)] [baz] [gorp]
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
P: prepend: 127.0.0.1:10002 - 1288727995.11859.baz - gorp
C [prepend]: using callback
C [prepend]: using callback
C [prepend]: using callback
P [127.0.0.1:10002]: < NOT_STORED
C [127.0.0.1:10002]: done with request
C [127.0.0.1:10002]: checking for job
S: Hash value is 6429, bucket # is 3, bucket value is 127.0.0.1:10002
M: prepend: 127.0.0.1:10002 - 1288727995.11859.baz - gorp
T: ->prepend with an existing value is prepend ([
  'foo',
  'gorp'
]
)
C [prepend]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [prepend]: [foo] [gorp]
C [__prepend]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x948da40)] [undef] [Memcached::Client::Connection=HASH(0x9484018)] [foo] [gorp]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: prepend: 127.0.0.1:10003 - 1288727995.11859.foo - gorp
C [prepend]: using callback
P [127.0.0.1:10003]: < STORED
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: prepend: 127.0.0.1:10003 - 1288727995.11859.foo - gorp
T: ->prepend_multi with various keys is prepend_multi ([
  [
    [
      'porridge',
      'We love '
    ]
  ]
]
)
C [prepend]: Found callback
C: calling __prepend_multi - [
  [
    [
      'porridge',
      'We love '
    ]
  ]
]
C [__prepend]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x9464ad0)] [undef] [ARRAY(0x9484968)]
Tuples are [
  [
    'porridge',
    'We love '
  ]
]
Tuple is [
  'porridge',
  'We love '
]
S: Hash value is 21333, bucket # is 18, bucket value is 127.0.0.1:10009
C: prepend 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: prepend: 127.0.0.1:10009 - 1288727995.11859.porridge - We love 
C: using callback
P [127.0.0.1:10009]: < STORED
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 21333, bucket # is 18, bucket value is 127.0.0.1:10009
M: prepend: 127.0.0.1:10009 - 1288727995.11859.porridge - We love 
T: ->get to verify ->prepend is get ([
  'foo'
]
)
C [get]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [get]: [foo]
C [get]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x903eb78)] [undef] [Memcached::Client::Connection=HASH(0x9484018)] [foo]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: get: 127.0.0.1:10003 - 1288727995.11859.foo
C [get]: using callback
P [127.0.0.1:10003]: < VALUE 1288727995.11859.foo 0 7
P [127.0.0.1:10003]: < gorpbar
P [127.0.0.1:10003]: < 
P [127.0.0.1:10003]: < END
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C: get - result {
  '1288727995.11859.foo' => {
    cas => undef,
    data => 'gorpbar',
    flags => '0'
  }
}
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: get: 127.0.0.1:10003 - 1288727995.11859.foo
T: ->delete without a key is delete ([]
)
C [delete]: Found callback
T: ->delete with a non-existent key is delete ([
  'bang'
]
)
C [delete]: Found callback
S: Hash value is 12473, bucket # is 20, bucket value is 127.0.0.1:10009
C [delete]: [bang]
C [delete]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x9461570)] [undef] [Memcached::Client::Connection=HASH(0x9464e70)] [bang]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: delete: 127.0.0.1:10009 - 1288727995.11859.bang
P [127.0.0.1:10009]: > delete 1288727995.11859.bang
C [delete]: using callback
C [delete]: using callback
P [127.0.0.1:10009]: < NOT_FOUND
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 12473, bucket # is 20, bucket value is 127.0.0.1:10009
M: delete: 127.0.0.1:10009 - 1288727995.11859.bang
T: ->delete with an existing key is delete ([
  'foo'
]
)
C [delete]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [delete]: [foo]
C [delete]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x948dbf0)] [undef] [Memcached::Client::Connection=HASH(0x9484018)] [foo]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: delete: 127.0.0.1:10003 - 1288727995.11859.foo
P [127.0.0.1:10003]: > delete 1288727995.11859.foo
C [delete]: using callback
P [127.0.0.1:10003]: < DELETED
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: delete: 127.0.0.1:10003 - 1288727995.11859.foo
T: ->delete_multi with various keys is delete_multi ([
  'complex',
  'panopticon'
]
)
C [delete]: Found callback
C: calling __delete_multi - [
  'complex',
  'panopticon'
]
C [delete_multi]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x939fae0)] [undef] [complex] [panopticon]
Keys are [
  'complex',
  'panopticon'
]
S: Hash value is 20, bucket # is 20, bucket value is 127.0.0.1:10009
key is complex
C: delete_multi 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: delete: 127.0.0.1:10009 - 1288727995.11859.complex
P [127.0.0.1:10009]: > delete 1288727995.11859.complex
S: Hash value is 23699, bucket # is 11, bucket value is 127.0.0.1:10005
key is panopticon
C: delete_multi 127.0.0.1:10005
C [127.0.0.1:10005]: queuing request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10005]: executing
P: delete: 127.0.0.1:10005 - 1288727995.11859.panopticon
P [127.0.0.1:10005]: > delete 1288727995.11859.panopticon
C: using callback
P [127.0.0.1:10009]: < DELETED
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
P [127.0.0.1:10005]: < NOT_FOUND
C [127.0.0.1:10005]: done with request
C [127.0.0.1:10005]: checking for job
S: Hash value is 20, bucket # is 20, bucket value is 127.0.0.1:10009
M: delete: 127.0.0.1:10009 - 1288727995.11859.complex
S: Hash value is 23699, bucket # is 11, bucket value is 127.0.0.1:10005
M: delete: 127.0.0.1:10005 - 1288727995.11859.panopticon
T: ->get to verify ->delete is get ([
  'foo'
]
)
C [get]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [get]: [foo]
C [get]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x9481a10)] [undef] [Memcached::Client::Connection=HASH(0x9484018)] [foo]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: get: 127.0.0.1:10003 - 1288727995.11859.foo
C [get]: using callback
P [127.0.0.1:10003]: < END
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: get: 127.0.0.1:10003 - 1288727995.11859.foo
T: ->add with a value is add ([
  'foo',
  '1'
]
)
C [add]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [add]: [foo] [1]
C [__add]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x947f300)] [undef] [Memcached::Client::Connection=HASH(0x9484018)] [foo] [1]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: add: 127.0.0.1:10003 - 1288727995.11859.foo - 1
C [add]: using callback
P [127.0.0.1:10003]: < STORED
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: add: 127.0.0.1:10003 - 1288727995.11859.foo - 1
T: ->get to verify ->add is get ([
  'foo'
]
)
C [get]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [get]: [foo]
C [get]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x9474e70)] [undef] [Memcached::Client::Connection=HASH(0x9484018)] [foo]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: get: 127.0.0.1:10003 - 1288727995.11859.foo
C [get]: using callback
P [127.0.0.1:10003]: < VALUE 1288727995.11859.foo 0 1
P [127.0.0.1:10003]: < 1
P [127.0.0.1:10003]: < 
P [127.0.0.1:10003]: < END
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C: get - result {
  '1288727995.11859.foo' => {
    cas => undef,
    data => '1',
    flags => '0'
  }
}
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: get: 127.0.0.1:10003 - 1288727995.11859.foo
T: ->incr without a key is incr ([]
)
C [incr]: Found callback
T: ->incr with a non-existent key is incr ([
  'bang'
]
)
C [incr]: Found callback
S: Hash value is 12473, bucket # is 20, bucket value is 127.0.0.1:10009
C [incr]: [bang]
C [__incr]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x9483bb8)] [undef] [Memcached::Client::Connection=HASH(0x9464e70)] [bang]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: incr: 127.0.0.1:10009 - 1288727995.11859.bang - 1
P [127.0.0.1:10009]: > incr 1288727995.11859.bang 1
C [incr]: using callback
C [incr]: using callback
P [127.0.0.1:10009]: < NOT_FOUND
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 12473, bucket # is 20, bucket value is 127.0.0.1:10009
M: incr: 127.0.0.1:10009 - 1288727995.11859.bang - 1
T: ->incr with an existing key is incr ([
  'foo'
]
)
C [incr]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [incr]: [foo]
C [__incr]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x9464e00)] [undef] [Memcached::Client::Connection=HASH(0x9484018)] [foo]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: incr: 127.0.0.1:10003 - 1288727995.11859.foo - 1
P [127.0.0.1:10003]: > incr 1288727995.11859.foo 1
C [incr]: using callback
P [127.0.0.1:10003]: < 2
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: incr: 127.0.0.1:10003 - 1288727995.11859.foo - 1
T: ->incr with an existing key and an amount is incr ([
  'foo',
  '72'
]
)
C [incr]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [incr]: [foo] [72]
C [__incr]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x948ff98)] [undef] [Memcached::Client::Connection=HASH(0x9484018)] [foo] [72]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: incr: 127.0.0.1:10003 - 1288727995.11859.foo - 72
P [127.0.0.1:10003]: > incr 1288727995.11859.foo 72
C [incr]: using callback
P [127.0.0.1:10003]: < 74
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: incr: 127.0.0.1:10003 - 1288727995.11859.foo - 72
T: ->get to verify ->incr is get ([
  'foo'
]
)
C [get]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [get]: [foo]
C [get]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x945f420)] [undef] [Memcached::Client::Connection=HASH(0x9484018)] [foo]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: get: 127.0.0.1:10003 - 1288727995.11859.foo
C [get]: using callback
P [127.0.0.1:10003]: < VALUE 1288727995.11859.foo 0 2
P [127.0.0.1:10003]: < 74
P [127.0.0.1:10003]: < 
P [127.0.0.1:10003]: < END
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C: get - result {
  '1288727995.11859.foo' => {
    cas => undef,
    data => '74',
    flags => '0'
  }
}
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: get: 127.0.0.1:10003 - 1288727995.11859.foo
T: ->decr without a key is decr ([]
)
C [decr]: Found callback
T: ->decr with a non-existent key is decr ([
  'bang'
]
)
C [decr]: Found callback
S: Hash value is 12473, bucket # is 20, bucket value is 127.0.0.1:10009
C [decr]: [bang]
C [__decr]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x9452890)] [undef] [Memcached::Client::Connection=HASH(0x9464e70)] [bang]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: decr: 127.0.0.1:10009 - 1288727995.11859.bang - 1
P [127.0.0.1:10009]: > decr 1288727995.11859.bang 1
C [decr]: using callback
C [decr]: using callback
P [127.0.0.1:10009]: < NOT_FOUND
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 12473, bucket # is 20, bucket value is 127.0.0.1:10009
M: decr: 127.0.0.1:10009 - 1288727995.11859.bang - 1
T: ->decr with an existing key is decr ([
  'foo'
]
)
C [decr]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [decr]: [foo]
C [__decr]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x948df70)] [undef] [Memcached::Client::Connection=HASH(0x9484018)] [foo]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: decr: 127.0.0.1:10003 - 1288727995.11859.foo - 1
P [127.0.0.1:10003]: > decr 1288727995.11859.foo 1
C [decr]: using callback
P [127.0.0.1:10003]: < 73
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: decr: 127.0.0.1:10003 - 1288727995.11859.foo - 1
T: ->decr with an existing key is decr ([
  'foo',
  18
]
)
C [decr]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [decr]: [foo] [18]
C [__decr]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x9452560)] [undef] [Memcached::Client::Connection=HASH(0x9484018)] [foo] [18]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: decr: 127.0.0.1:10003 - 1288727995.11859.foo - 18
P [127.0.0.1:10003]: > decr 1288727995.11859.foo 18
C [decr]: using callback
P [127.0.0.1:10003]: < 55
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: decr: 127.0.0.1:10003 - 1288727995.11859.foo - 18
T: ->get to verify ->decr is get ([
  'foo'
]
)
C [get]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [get]: [foo]
C [get]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x947f060)] [undef] [Memcached::Client::Connection=HASH(0x9484018)] [foo]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: get: 127.0.0.1:10003 - 1288727995.11859.foo
C [get]: using callback
P [127.0.0.1:10003]: < VALUE 1288727995.11859.foo 0 2
P [127.0.0.1:10003]: < 55
P [127.0.0.1:10003]: < 
P [127.0.0.1:10003]: < END
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C: get - result {
  '1288727995.11859.foo' => {
    cas => undef,
    data => '55',
    flags => '0'
  }
}
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: get: 127.0.0.1:10003 - 1288727995.11859.foo
T: ->get with all keys set so far is get_multi ([
  [
    'bar',
    'foo'
  ]
]
)
C [get]: Found callback
C: calling __get_multi - [
  [
    'bar',
    'foo'
  ]
]
C [get_multi]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x947f270)] [undef] [ARRAY(0x9452890)]
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C: get 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: get: 127.0.0.1:10003 - 1288727995.11859.foo
C: get 127.0.0.1:10008
C [127.0.0.1:10008]: connecting to [127.0.0.1:10008]
C [127.0.0.1:10008]: preparing handle
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727995.11859.bar
C: using callback
P [127.0.0.1:10003]: < VALUE 1288727995.11859.foo 0 2
P [127.0.0.1:10003]: < 55
P [127.0.0.1:10003]: < 
P [127.0.0.1:10003]: < END
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C: get - result {
  '1288727995.11859.foo' => {
    cas => undef,
    data => '55',
    flags => '0'
  }
}
C [127.0.0.1:10008]: fatal error Connection refused
C [127.0.0.1:10008]: failing requests
C [127.0.0.1:10008]: failing request {
  failback => sub { "DUMMY" },
  request => sub { "DUMMY" }
}
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: get: 127.0.0.1:10003 - 1288727995.11859.foo
T: ->incr_multi with various keys is incr_multi ([
  [
    [
      'foo'
    ]
  ]
]
)
C [incr]: Found callback
C: calling __incr_multi - [
  [
    [
      'foo'
    ]
  ]
]
C [__incr]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x945b4a0)] [undef] [ARRAY(0x94904e8)]
Begin on command CV to establish callback
Tuples are [
  [
    'foo'
  ]
]
Tuple is [
  'foo'
]
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
keys is foo, server is 127.0.0.1:10003
C: incr 127.0.0.1:10003
Begin on command CV before enqueue
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: incr: 127.0.0.1:10003 - 1288727995.11859.foo - 1
P [127.0.0.1:10003]: > incr 1288727995.11859.foo 1
End on command CV 
C: using callback
P [127.0.0.1:10003]: < 56
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
End on command CV from server CV
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: incr: 127.0.0.1:10003 - 1288727995.11859.foo - 1
T: ->incr_multi with various keys is incr_multi ([
  [
    [
      'braga',
      1,
      17
    ],
    [
      'foo',
      7
    ]
  ]
]
)
C [incr]: Found callback
C: calling __incr_multi - [
  [
    [
      'braga',
      1,
      17
    ],
    [
      'foo',
      7
    ]
  ]
]
C [__incr]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x9452ed0)] [undef] [ARRAY(0x9490aa8)]
Begin on command CV to establish callback
Tuples are [
  [
    'braga',
    1,
    17
  ],
  [
    'foo',
    7
  ]
]
Tuple is [
  'braga',
  1,
  17
]
S: Hash value is 6004, bucket # is 19, bucket value is 127.0.0.1:10009
keys is braga, server is 127.0.0.1:10009
C: incr 127.0.0.1:10009
Begin on command CV before enqueue
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: incr: 127.0.0.1:10009 - 1288727995.11859.braga - 1
P [127.0.0.1:10009]: > incr 1288727995.11859.braga 1
Tuple is [
  'foo',
  7
]
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
keys is foo, server is 127.0.0.1:10003
C: incr 127.0.0.1:10003
Begin on command CV before enqueue
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: incr: 127.0.0.1:10003 - 1288727995.11859.foo - 7
P [127.0.0.1:10003]: > incr 1288727995.11859.foo 7
End on command CV 
C: using callback
P [127.0.0.1:10009]: < NOT_FOUND
P [127.0.0.1:10009]: > add 1288727995.11859.braga 0 0 2
17
P [127.0.0.1:10003]: < 63
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
End on command CV from server CV
P [127.0.0.1:10009]: < STORED
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
End on command CV from server CV
S: Hash value is 6004, bucket # is 19, bucket value is 127.0.0.1:10009
M: incr: 127.0.0.1:10009 - 1288727995.11859.braga - 1
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: incr: 127.0.0.1:10003 - 1288727995.11859.foo - 7
T: ->decr_multi with various keys is decr_multi ([
  [
    [
      'braga',
      3
    ],
    [
      'bartinate',
      7,
      33
    ]
  ]
]
)
C [decr]: Found callback
C: calling __decr_multi - [
  [
    [
      'braga',
      3
    ],
    [
      'bartinate',
      7,
      33
    ]
  ]
]
C [__decr]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x9490df8)] [undef] [ARRAY(0x9474810)]
Begin on command CV to establish callback
Tuples are [
  [
    'braga',
    3
  ],
  [
    'bartinate',
    7,
    33
  ]
]
Tuple is [
  'braga',
  3
]
S: Hash value is 6004, bucket # is 19, bucket value is 127.0.0.1:10009
keys is braga, server is 127.0.0.1:10009
C: decr 127.0.0.1:10009
Begin on command CV before enqueue
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: decr: 127.0.0.1:10009 - 1288727995.11859.braga - 3
P [127.0.0.1:10009]: > decr 1288727995.11859.braga 3
Tuple is [
  'bartinate',
  7,
  33
]
S: Hash value is 23809, bucket # is 16, bucket value is 127.0.0.1:10008
keys is bartinate, server is 127.0.0.1:10008
C: decr 127.0.0.1:10008
Begin on command CV before enqueue
C [127.0.0.1:10008]: connecting to [127.0.0.1:10008]
C [127.0.0.1:10008]: preparing handle
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: decr: 127.0.0.1:10008 - 1288727995.11859.bartinate - 7
P [127.0.0.1:10008]: > decr 1288727995.11859.bartinate 7
End on command CV 
C: using callback
P [127.0.0.1:10009]: < 14
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
End on command CV from server CV
C [127.0.0.1:10008]: fatal error Connection refused
C [127.0.0.1:10008]: failing requests
C [127.0.0.1:10008]: failing request {
  failback => sub { "DUMMY" },
  request => sub { "DUMMY" }
}
End on command CV from error callback
S: Hash value is 6004, bucket # is 19, bucket value is 127.0.0.1:10009
M: decr: 127.0.0.1:10009 - 1288727995.11859.braga - 3
S: Hash value is 23809, bucket # is 16, bucket value is 127.0.0.1:10008
T: ->flush_all to clear servers is flush_all ([]
)
C [flush_all]: Found callback
C [flush_all]: enqueuing to 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: flush_all: 127.0.0.1:10003
P [127.0.0.1:10003]: > flush_all
C [flush_all]: enqueuing to 127.0.0.1:10004
C [127.0.0.1:10004]: queuing request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10004]: executing
P: flush_all: 127.0.0.1:10004
P [127.0.0.1:10004]: > flush_all
C [flush_all]: enqueuing to 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: flush_all: 127.0.0.1:10007
P [127.0.0.1:10007]: > flush_all
C [flush_all]: enqueuing to 127.0.0.1:10002
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
P: flush_all: 127.0.0.1:10002
P [127.0.0.1:10002]: > flush_all
C [flush_all]: enqueuing to 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: flush_all: 127.0.0.1:10009
P [127.0.0.1:10009]: > flush_all
C [flush_all]: enqueuing to 127.0.0.1:10005
C [127.0.0.1:10005]: queuing request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10005]: executing
P: flush_all: 127.0.0.1:10005
P [127.0.0.1:10005]: > flush_all
C [flush_all]: enqueuing to 127.0.0.1:10006
C [127.0.0.1:10006]: queuing request
C [127.0.0.1:10006]: checking for job
C [127.0.0.1:10006]: executing
P: flush_all: 127.0.0.1:10006
P [127.0.0.1:10006]: > flush_all
C [flush_all]: enqueuing to 127.0.0.1:10008
C [127.0.0.1:10008]: connecting to [127.0.0.1:10008]
C [127.0.0.1:10008]: preparing handle
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: flush_all: 127.0.0.1:10008
P [127.0.0.1:10008]: > flush_all
C [flush_all]: enqueuing to 127.0.0.1:10001
C [127.0.0.1:10001]: queuing request
C [127.0.0.1:10001]: checking for job
C [127.0.0.1:10001]: executing
P: flush_all: 127.0.0.1:10001
P [127.0.0.1:10001]: > flush_all
C: using callback
P [127.0.0.1:10001]: < OK
C [127.0.0.1:10001]: done with request
C [127.0.0.1:10001]: checking for job
P [127.0.0.1:10006]: < OK
C [127.0.0.1:10006]: done with request
C [127.0.0.1:10006]: checking for job
P [127.0.0.1:10005]: < OK
C [127.0.0.1:10005]: done with request
C [127.0.0.1:10005]: checking for job
P [127.0.0.1:10009]: < OK
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
P [127.0.0.1:10002]: < OK
C [127.0.0.1:10002]: done with request
C [127.0.0.1:10002]: checking for job
P [127.0.0.1:10007]: < OK
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
P [127.0.0.1:10004]: < OK
C [127.0.0.1:10004]: done with request
C [127.0.0.1:10004]: checking for job
P [127.0.0.1:10003]: < OK
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10008]: fatal error Connection refused
C [127.0.0.1:10008]: failing requests
C [127.0.0.1:10008]: failing request {
  failback => sub { "DUMMY" },
  request => sub { "DUMMY" }
}
M: flush_all: 127.0.0.1:10003
M: flush_all: 127.0.0.1:10007
M: flush_all: 127.0.0.1:10004
M: flush_all: 127.0.0.1:10002
M: flush_all: 127.0.0.1:10009
M: flush_all: 127.0.0.1:10006
M: flush_all: 127.0.0.1:10005
M: flush_all: 127.0.0.1:10001
T: ->get with all keys set so far is get_multi ([
  [
    'bar',
    'foo'
  ]
]
)
C [get]: Found callback
C: calling __get_multi - [
  [
    'bar',
    'foo'
  ]
]
C [get_multi]: [Memcached::Client=HASH(0x9458eb8)] [AnyEvent::CondVar=HASH(0x94a6740)] [undef] [ARRAY(0x9490908)]
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C: get 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: get: 127.0.0.1:10003 - 1288727995.11859.foo
C: get 127.0.0.1:10008
C [127.0.0.1:10008]: connecting to [127.0.0.1:10008]
C [127.0.0.1:10008]: preparing handle
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727995.11859.bar
C: using callback
P [127.0.0.1:10003]: < END
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10008]: fatal error Connection refused
C [127.0.0.1:10008]: failing requests
C [127.0.0.1:10008]: failing request {
  failback => sub { "DUMMY" },
  request => sub { "DUMMY" }
}
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: get: 127.0.0.1:10003 - 1288727995.11859.foo
Done with Traditional/Text async
Checking port 10008 for existing process
Using port 10008
Fork successful, pid 11928
Checking 127.0.0.1:10008
running Traditional/Binary async
C: new - {
  namespace => '1288727995.11859.',
  protocol => 'Binary',
  selector => 'Traditional',
  servers => [
    [
      '127.0.0.1:10001',
      3
    ],
    [
      '127.0.0.1:10002',
      2
    ],
    [
      '127.0.0.1:10003',
      2
    ],
    [
      '127.0.0.1:10004',
      2
    ],
    [
      '127.0.0.1:10005',
      3
    ],
    [
      '127.0.0.1:10006',
      3
    ],
    '127.0.0.1:10007',
    [
      '127.0.0.1:10008',
      2
    ],
    [
      '127.0.0.1:10009',
      3
    ]
  ]
}
S: Setting server list to [
  [
    '127.0.0.1:10001',
    3
  ],
  [
    '127.0.0.1:10002',
    2
  ],
  [
    '127.0.0.1:10003',
    2
  ],
  [
    '127.0.0.1:10004',
    2
  ],
  [
    '127.0.0.1:10005',
    3
  ],
  [
    '127.0.0.1:10006',
    3
  ],
  '127.0.0.1:10007',
  [
    '127.0.0.1:10008',
    2
  ],
  [
    '127.0.0.1:10009',
    3
  ]
]
S: Bucket list is [
  '127.0.0.1:10001',
  '127.0.0.1:10001',
  '127.0.0.1:10001',
  '127.0.0.1:10002',
  '127.0.0.1:10002',
  '127.0.0.1:10003',
  '127.0.0.1:10003',
  '127.0.0.1:10004',
  '127.0.0.1:10004',
  '127.0.0.1:10005',
  '127.0.0.1:10005',
  '127.0.0.1:10005',
  '127.0.0.1:10006',
  '127.0.0.1:10006',
  '127.0.0.1:10006',
  '127.0.0.1:10007',
  '127.0.0.1:10008',
  '127.0.0.1:10008',
  '127.0.0.1:10009',
  '127.0.0.1:10009',
  '127.0.0.1:10009'
]
, bucket count is 21
Creating connection for 127.0.0.1:10003
Creating connection for 127.0.0.1:10007
Creating connection for 127.0.0.1:10004
Creating connection for 127.0.0.1:10002
Creating connection for 127.0.0.1:10009
Creating connection for 127.0.0.1:10006
Creating connection for 127.0.0.1:10005
Creating connection for 127.0.0.1:10008
Creating connection for 127.0.0.1:10001
C: Done creating object
S: Setting server list to [
  [
    '127.0.0.1:10001',
    3
  ],
  [
    '127.0.0.1:10002',
    2
  ],
  [
    '127.0.0.1:10003',
    2
  ],
  [
    '127.0.0.1:10004',
    2
  ],
  [
    '127.0.0.1:10005',
    3
  ],
  [
    '127.0.0.1:10006',
    3
  ],
  '127.0.0.1:10007',
  [
    '127.0.0.1:10008',
    2
  ],
  [
    '127.0.0.1:10009',
    3
  ]
]
S: Bucket list is [
  '127.0.0.1:10001',
  '127.0.0.1:10001',
  '127.0.0.1:10001',
  '127.0.0.1:10002',
  '127.0.0.1:10002',
  '127.0.0.1:10003',
  '127.0.0.1:10003',
  '127.0.0.1:10004',
  '127.0.0.1:10004',
  '127.0.0.1:10005',
  '127.0.0.1:10005',
  '127.0.0.1:10005',
  '127.0.0.1:10006',
  '127.0.0.1:10006',
  '127.0.0.1:10006',
  '127.0.0.1:10007',
  '127.0.0.1:10008',
  '127.0.0.1:10008',
  '127.0.0.1:10009',
  '127.0.0.1:10009',
  '127.0.0.1:10009'
]
, bucket count is 21
Mock cluster is bless( {
  hash_namespace => 1,
  namespace => '1288727995.11859.',
  selector => bless( {
    bucketcount => 21,
    buckets => [
      '127.0.0.1:10001',
      '127.0.0.1:10001',
      '127.0.0.1:10001',
      '127.0.0.1:10002',
      '127.0.0.1:10002',
      '127.0.0.1:10003',
      '127.0.0.1:10003',
      '127.0.0.1:10004',
      '127.0.0.1:10004',
      '127.0.0.1:10005',
      '127.0.0.1:10005',
      '127.0.0.1:10005',
      '127.0.0.1:10006',
      '127.0.0.1:10006',
      '127.0.0.1:10006',
      '127.0.0.1:10007',
      '127.0.0.1:10008',
      '127.0.0.1:10008',
      '127.0.0.1:10009',
      '127.0.0.1:10009',
      '127.0.0.1:10009'
    ]
  }, 'Memcached::Client::Selector::Traditional' ),
  servers => {
    '127.0.0.1:10001' => {},
    '127.0.0.1:10002' => {},
    '127.0.0.1:10003' => {},
    '127.0.0.1:10004' => {},
    '127.0.0.1:10005' => {},
    '127.0.0.1:10006' => {},
    '127.0.0.1:10007' => {},
    '127.0.0.1:10008' => {},
    '127.0.0.1:10009' => {}
  },
  version => '1.4.5'
}, 't::Memcached::Mock' )
Choice is #6, 127.0.0.1:10007
T: running Traditional/Binary async
T: ->connect is connect ([
  1
]
)
C [connect]: Starting connection
C [connect]: Found callback
C [connect]: Connecting 127.0.0.1:10003
C [127.0.0.1:10003]: connecting to [127.0.0.1:10003]
C [127.0.0.1:10003]: preparing handle
C [connect]: Connecting 127.0.0.1:10004
C [127.0.0.1:10004]: connecting to [127.0.0.1:10004]
C [127.0.0.1:10004]: preparing handle
C [connect]: Connecting 127.0.0.1:10007
C [127.0.0.1:10007]: connecting to [127.0.0.1:10007]
C [127.0.0.1:10007]: preparing handle
C [connect]: Connecting 127.0.0.1:10002
C [127.0.0.1:10002]: connecting to [127.0.0.1:10002]
C [127.0.0.1:10002]: preparing handle
C [connect]: Connecting 127.0.0.1:10009
C [127.0.0.1:10009]: connecting to [127.0.0.1:10009]
C [127.0.0.1:10009]: preparing handle
C [connect]: Connecting 127.0.0.1:10005
C [127.0.0.1:10005]: connecting to [127.0.0.1:10005]
C [127.0.0.1:10005]: preparing handle
C [connect]: Connecting 127.0.0.1:10006
C [127.0.0.1:10006]: connecting to [127.0.0.1:10006]
C [127.0.0.1:10006]: preparing handle
C [connect]: Connecting 127.0.0.1:10008
C [127.0.0.1:10008]: connecting to [127.0.0.1:10008]
C [127.0.0.1:10008]: preparing handle
C [connect]: Connecting 127.0.0.1:10001
C [127.0.0.1:10001]: connecting to [127.0.0.1:10001]
C [127.0.0.1:10001]: preparing handle
C: using callback
C [127.0.0.1:10001]: connected
C [connect]: Done connecting 127.0.0.1:10001
C [127.0.0.1:10001]: checking for job
C [127.0.0.1:10008]: connected
C [connect]: Done connecting 127.0.0.1:10008
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10006]: connected
C [connect]: Done connecting 127.0.0.1:10006
C [127.0.0.1:10006]: checking for job
C [127.0.0.1:10005]: connected
C [connect]: Done connecting 127.0.0.1:10005
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10009]: connected
C [connect]: Done connecting 127.0.0.1:10009
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10002]: connected
C [connect]: Done connecting 127.0.0.1:10002
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10007]: connected
C [connect]: Done connecting 127.0.0.1:10007
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10004]: connected
C [connect]: Done connecting 127.0.0.1:10004
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10003]: connected
C [connect]: Done connecting 127.0.0.1:10003
T: Checking for version on all servers is version ([]
)
C [version]: Found callback
C [version]: enqueuing to 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: version: 127.0.0.1:10003
C [version]: enqueuing to 127.0.0.1:10004
C [127.0.0.1:10004]: queuing request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10004]: executing
P: version: 127.0.0.1:10004
C [version]: enqueuing to 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
P: version: 127.0.0.1:10007
C [version]: enqueuing to 127.0.0.1:10002
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
P: version: 127.0.0.1:10002
C [version]: enqueuing to 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: version: 127.0.0.1:10009
C [version]: enqueuing to 127.0.0.1:10005
C [127.0.0.1:10005]: queuing request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10005]: executing
P: version: 127.0.0.1:10005
C [version]: enqueuing to 127.0.0.1:10006
C [127.0.0.1:10006]: queuing request
C [127.0.0.1:10006]: checking for job
C [127.0.0.1:10006]: executing
P: version: 127.0.0.1:10006
C [version]: enqueuing to 127.0.0.1:10008
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: version: 127.0.0.1:10008
C [version]: enqueuing to 127.0.0.1:10001
C [127.0.0.1:10001]: queuing request
C [127.0.0.1:10001]: checking for job
C [127.0.0.1:10001]: executing
P: version: 127.0.0.1:10001
C: using callback
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10006]: done with request
C [127.0.0.1:10006]: checking for job
C [127.0.0.1:10005]: done with request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10002]: done with request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10007]: done with request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10004]: done with request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10001]: done with request
C [127.0.0.1:10001]: checking for job
M: version: 127.0.0.1:10003
M: version: 127.0.0.1:10007
M: version: 127.0.0.1:10004
M: version: 127.0.0.1:10002
M: version: 127.0.0.1:10009
M: version: 127.0.0.1:10006
M: version: 127.0.0.1:10005
M: version: 127.0.0.1:10008
M: version: 127.0.0.1:10001
T: ->set without a key is set ([]
)
C [set]: Found callback
T: ->set without a value is set ([
  'foo'
]
)
C [set]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [set]: [foo]
C [__set]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94a68a0)] [undef] [Memcached::Client::Connection=HASH(0x94a6ea0)] [foo]
T: ->set with a value is set ([
  'foo',
  'bar'
]
)
C [set]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [set]: [foo] [bar]
C [__set]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94b1ff8)] [undef] [Memcached::Client::Connection=HASH(0x94a6ea0)] [foo] [bar]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: set: 127.0.0.1:10003 - 1288727995.11859.foo - bar
C [set]: using callback
C [set]: using callback
C [set]: using callback
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: set: 127.0.0.1:10003 - 1288727995.11859.foo - bar
T: ->set with a pre-hashed key is set ([
  [
    '37',
    'llama'
  ],
  'bar'
]
)
C [set]: Found callback
S: Hash value is 37, bucket # is 16, bucket value is 127.0.0.1:10008
C [set]: [ARRAY(0x94a67c0)] [bar]
C [__set]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94bf028)] [undef] [Memcached::Client::Connection=HASH(0x94a6e00)] [ARRAY(0x94a67c0)] [bar]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: set: 127.0.0.1:10008 - 1288727995.11859.llama - bar
C [set]: using callback
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
S: Hash value is 37, bucket # is 16, bucket value is 127.0.0.1:10008
M: set: 127.0.0.1:10008 - 1288727995.11859.llama - bar
T: ->set_multi with various keys is set_multi ([
  [
    [
      'teatime',
      3
    ],
    [
      'bagman',
      'ludo'
    ]
  ]
]
)
C [set]: Found callback
C: calling __set_multi - [
  [
    [
      'teatime',
      3
    ],
    [
      'bagman',
      'ludo'
    ]
  ]
]
C [__set]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x947f380)] [undef] [ARRAY(0x94ad988)]
Tuples are [
  [
    'teatime',
    3
  ],
  [
    'bagman',
    'ludo'
  ]
]
Tuple is [
  'teatime',
  3
]
S: Hash value is 25712, bucket # is 8, bucket value is 127.0.0.1:10004
C: set 127.0.0.1:10004
C [127.0.0.1:10004]: queuing request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10004]: executing
P: set: 127.0.0.1:10004 - 1288727995.11859.teatime - 3
Tuple is [
  'bagman',
  'ludo'
]
S: Hash value is 13863, bucket # is 3, bucket value is 127.0.0.1:10002
C: set 127.0.0.1:10002
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
P: set: 127.0.0.1:10002 - 1288727995.11859.bagman - ludo
C: using callback
C [127.0.0.1:10004]: done with request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10002]: done with request
C [127.0.0.1:10002]: checking for job
S: Hash value is 25712, bucket # is 8, bucket value is 127.0.0.1:10004
M: set: 127.0.0.1:10004 - 1288727995.11859.teatime - 3
S: Hash value is 13863, bucket # is 3, bucket value is 127.0.0.1:10002
M: set: 127.0.0.1:10002 - 1288727995.11859.bagman - ludo
T: ->add without a key is add ([]
)
C [add]: Found callback
T: ->add without a value is add ([
  'foo'
]
)
C [add]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [add]: [foo]
C [__add]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x8e94f20)] [undef] [Memcached::Client::Connection=HASH(0x94a6ea0)] [foo]
T: ->add with a value is add ([
  'bar',
  'baz'
]
)
C [add]: Found callback
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
C [add]: [bar] [baz]
C [__add]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94a6960)] [undef] [Memcached::Client::Connection=HASH(0x94a6e00)] [bar] [baz]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: add: 127.0.0.1:10008 - 1288727995.11859.bar - baz
C [add]: using callback
C [add]: using callback
C [add]: using callback
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
M: add: 127.0.0.1:10008 - 1288727995.11859.bar - baz
Failing 127.0.0.1:10007
Pid is 11862
Trying TERM
Waitpid returned 11862
Deleted 127.0.0.1:10007, result bless( {
  hash_namespace => 1,
  namespace => '1288727995.11859.',
  selector => bless( {
    bucketcount => 21,
    buckets => [
      '127.0.0.1:10001',
      '127.0.0.1:10001',
      '127.0.0.1:10001',
      '127.0.0.1:10002',
      '127.0.0.1:10002',
      '127.0.0.1:10003',
      '127.0.0.1:10003',
      '127.0.0.1:10004',
      '127.0.0.1:10004',
      '127.0.0.1:10005',
      '127.0.0.1:10005',
      '127.0.0.1:10005',
      '127.0.0.1:10006',
      '127.0.0.1:10006',
      '127.0.0.1:10006',
      '127.0.0.1:10007',
      '127.0.0.1:10008',
      '127.0.0.1:10008',
      '127.0.0.1:10009',
      '127.0.0.1:10009',
      '127.0.0.1:10009'
    ]
  }, 'Memcached::Client::Selector::Traditional' ),
  servers => {
    '127.0.0.1:10001' => {},
    '127.0.0.1:10002' => {
      '1288727995.11859.bagman' => 'ludo'
    },
    '127.0.0.1:10003' => {
      '1288727995.11859.foo' => 'bar'
    },
    '127.0.0.1:10004' => {
      '1288727995.11859.teatime' => 3
    },
    '127.0.0.1:10005' => {},
    '127.0.0.1:10006' => {},
    '127.0.0.1:10008' => {
      '1288727995.11859.bar' => 'baz',
      '1288727995.11859.llama' => 'bar'
    },
    '127.0.0.1:10009' => {}
  },
  version => '1.4.5'
}, 't::Memcached::Mock' )
T: ->add with an existing value is add ([
  'bar',
  'foo'
]
)
C [add]: Found callback
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
C [add]: [bar] [foo]
C [__add]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94b2128)] [undef] [Memcached::Client::Connection=HASH(0x94a6e00)] [bar] [foo]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: add: 127.0.0.1:10008 - 1288727995.11859.bar - foo
C [add]: using callback
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
M: add: 127.0.0.1:10008 - 1288727995.11859.bar - foo
T: ->set_multi with various pre-existing keys is add_multi ([
  [
    [
      'teatime',
      3
    ],
    [
      'bagman',
      'ludo'
    ]
  ]
]
)
C [add]: Found callback
C: calling __add_multi - [
  [
    [
      'teatime',
      3
    ],
    [
      'bagman',
      'ludo'
    ]
  ]
]
C [__add]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x948de60)] [undef] [ARRAY(0x94b2a28)]
Tuples are [
  [
    'teatime',
    3
  ],
  [
    'bagman',
    'ludo'
  ]
]
Tuple is [
  'teatime',
  3
]
S: Hash value is 25712, bucket # is 8, bucket value is 127.0.0.1:10004
C: add 127.0.0.1:10004
C [127.0.0.1:10004]: queuing request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10004]: executing
P: add: 127.0.0.1:10004 - 1288727995.11859.teatime - 3
Tuple is [
  'bagman',
  'ludo'
]
S: Hash value is 13863, bucket # is 3, bucket value is 127.0.0.1:10002
C: add 127.0.0.1:10002
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
P: add: 127.0.0.1:10002 - 1288727995.11859.bagman - ludo
C: using callback
C [127.0.0.1:10004]: done with request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10002]: done with request
C [127.0.0.1:10002]: checking for job
S: Hash value is 25712, bucket # is 8, bucket value is 127.0.0.1:10004
M: add: 127.0.0.1:10004 - 1288727995.11859.teatime - 3
S: Hash value is 13863, bucket # is 3, bucket value is 127.0.0.1:10002
M: add: 127.0.0.1:10002 - 1288727995.11859.bagman - ludo
T: ->set_multi with various keys is add_multi ([
  [
    [
      'porridge',
      'salty'
    ],
    [
      'complex',
      'simple'
    ],
    [
      'bagman',
      'horace'
    ]
  ]
]
)
C [add]: Found callback
C: calling __add_multi - [
  [
    [
      'porridge',
      'salty'
    ],
    [
      'complex',
      'simple'
    ],
    [
      'bagman',
      'horace'
    ]
  ]
]
C [__add]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94bef68)] [undef] [ARRAY(0x94a6860)]
Tuples are [
  [
    'porridge',
    'salty'
  ],
  [
    'complex',
    'simple'
  ],
  [
    'bagman',
    'horace'
  ]
]
Tuple is [
  'porridge',
  'salty'
]
S: Hash value is 21333, bucket # is 18, bucket value is 127.0.0.1:10009
C: add 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: add: 127.0.0.1:10009 - 1288727995.11859.porridge - salty
Tuple is [
  'complex',
  'simple'
]
S: Hash value is 20, bucket # is 20, bucket value is 127.0.0.1:10009
C: add 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
Tuple is [
  'bagman',
  'horace'
]
S: Hash value is 13863, bucket # is 3, bucket value is 127.0.0.1:10002
C: add 127.0.0.1:10002
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
P: add: 127.0.0.1:10002 - 1288727995.11859.bagman - horace
C: using callback
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: add: 127.0.0.1:10009 - 1288727995.11859.complex - simple
C [127.0.0.1:10002]: done with request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 21333, bucket # is 18, bucket value is 127.0.0.1:10009
M: add: 127.0.0.1:10009 - 1288727995.11859.porridge - salty
S: Hash value is 20, bucket # is 20, bucket value is 127.0.0.1:10009
M: add: 127.0.0.1:10009 - 1288727995.11859.complex - simple
S: Hash value is 13863, bucket # is 3, bucket value is 127.0.0.1:10002
M: add: 127.0.0.1:10002 - 1288727995.11859.bagman - horace
T: ->add with a pre-hashed key is set ([
  [
    '19',
    'ding-dong'
  ],
  'bar'
]
)
C [set]: Found callback
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [set]: [ARRAY(0x945ea70)] [bar]
C [__set]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x9474a50)] [undef] [Memcached::Client::Connection=HASH(0x94a6f10)] [ARRAY(0x945ea70)] [bar]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: set: 127.0.0.1:10009 - 1288727995.11859.ding-dong - bar
C [set]: using callback
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: set: 127.0.0.1:10009 - 1288727995.11859.ding-dong - bar
T: ->get without a key is get ([]
)
C [get]: Found callback
T: ->get a non-existant value is get ([
  'bang'
]
)
C [get]: Found callback
S: Hash value is 12473, bucket # is 20, bucket value is 127.0.0.1:10009
C [get]: [bang]
C [get]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94aa4b8)] [undef] [Memcached::Client::Connection=HASH(0x94a6f10)] [bang]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: get: 127.0.0.1:10009 - 1288727995.11859.bang
C [get]: using callback
C [get]: using callback
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C: get - result {}
S: Hash value is 12473, bucket # is 20, bucket value is 127.0.0.1:10009
M: get: 127.0.0.1:10009 - 1288727995.11859.bang
T: ->get an existing value is get ([
  'bar'
]
)
C [get]: Found callback
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
C [get]: [bar]
C [get]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94b7488)] [undef] [Memcached::Client::Connection=HASH(0x94a6e00)] [bar]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727995.11859.bar
C [get]: using callback
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727995.11859.bar' => {
    cas => 2,
    data => 'baz',
    flags => 0
  }
}
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727995.11859.bar
T: ->get a value with a pre-hashed key is get ([
  [
    '19',
    'ding-dong'
  ]
]
)
C [get]: Found callback
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [get]: [ARRAY(0x94be468)]
C [get]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94bed58)] [undef] [Memcached::Client::Connection=HASH(0x94a6f10)] [ARRAY(0x94be468)]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: get: 127.0.0.1:10009 - 1288727995.11859.ding-dong
C [get]: using callback
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C: get - result {
  '1288727995.11859.ding-dong' => {
    cas => 31,
    data => 'bar',
    flags => 0
  }
}
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: get: 127.0.0.1:10009 - 1288727995.11859.ding-dong
T: ->get_multi without a list is get_multi ([]
)
C [get]: Found callback
C: calling __get_multi - []
C [get_multi]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94b2738)] [undef]
T: ->get_multi with an empty list is get_multi ([
  []
]
)
C [get]: Found callback
C: calling __get_multi - [
  []
]
C [get_multi]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94c0c40)] [undef] [ARRAY(0x94aa578)]
T: ->get with all keys set so far is get_multi ([
  [
    'bar',
    'foo',
    'porridge'
  ]
]
)
C [get]: Found callback
C: calling __get_multi - [
  [
    'bar',
    'foo',
    'porridge'
  ]
]
C [get_multi]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94aa718)] [undef] [ARRAY(0x94a6850)]
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
S: Hash value is 21333, bucket # is 18, bucket value is 127.0.0.1:10009
C: get 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: get: 127.0.0.1:10003 - 1288727995.11859.foo
C: get 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: get: 127.0.0.1:10009 - 1288727995.11859.porridge
C: get 127.0.0.1:10008
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727995.11859.bar
C: using callback
C: using callback
C: using callback
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C: get - result {
  '1288727995.11859.foo' => {
    cas => 16,
    data => 'bar',
    flags => 0
  }
}
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C: get - result {
  '1288727995.11859.porridge' => {
    cas => 29,
    data => 'salty',
    flags => 0
  }
}
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727995.11859.bar' => {
    cas => 2,
    data => 'baz',
    flags => 0
  }
}
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727995.11859.bar
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: get: 127.0.0.1:10003 - 1288727995.11859.foo
S: Hash value is 21333, bucket # is 18, bucket value is 127.0.0.1:10009
M: get: 127.0.0.1:10009 - 1288727995.11859.porridge
T: ->get with all keys set so far is get_multi ([
  [
    [
      '37',
      'llama'
    ],
    'bar',
    'foo'
  ]
]
)
C [get]: Found callback
C: calling __get_multi - [
  [
    [
      '37',
      'llama'
    ],
    'bar',
    'foo'
  ]
]
C [get_multi]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94b73c8)] [undef] [ARRAY(0x94b5140)]
S: Hash value is 37, bucket # is 16, bucket value is 127.0.0.1:10008
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C: get 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: get: 127.0.0.1:10003 - 1288727995.11859.foo
C: get 127.0.0.1:10008
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727995.11859.llama
P: get: 127.0.0.1:10008 - 1288727995.11859.bar
C: using callback
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C: get - result {
  '1288727995.11859.foo' => {
    cas => 16,
    data => 'bar',
    flags => 0
  }
}
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727995.11859.bar' => {
    cas => 2,
    data => 'baz',
    flags => 0
  },
  '1288727995.11859.llama' => {
    cas => 1,
    data => 'bar',
    flags => 0
  }
}
S: Hash value is 37, bucket # is 16, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727995.11859.llama
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727995.11859.bar
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: get: 127.0.0.1:10003 - 1288727995.11859.foo
T: ->replace without a key is replace ([]
)
C [replace]: Found callback
T: ->replace without a value is replace ([
  'foo'
]
)
C [replace]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [replace]: [foo]
C [__replace]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94bee68)] [undef] [Memcached::Client::Connection=HASH(0x94a6ea0)] [foo]
T: ->replace with a non-existent value is replace ([
  'baz',
  'gorp'
]
)
C [replace]: Found callback
S: Hash value is 6429, bucket # is 3, bucket value is 127.0.0.1:10002
C [replace]: [baz] [gorp]
C [__replace]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94b76b8)] [undef] [Memcached::Client::Connection=HASH(0x94a7110)] [baz] [gorp]
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
P: replace: 127.0.0.1:10002 - 1288727995.11859.baz - gorp
C [replace]: using callback
C [replace]: using callback
C [replace]: using callback
C [127.0.0.1:10002]: done with request
C [127.0.0.1:10002]: checking for job
S: Hash value is 6429, bucket # is 3, bucket value is 127.0.0.1:10002
M: replace: 127.0.0.1:10002 - 1288727995.11859.baz - gorp
T: ->replace with an existing value is replace ([
  'bar',
  'gondola'
]
)
C [replace]: Found callback
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
C [replace]: [bar] [gondola]
C [__replace]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94b2bf8)] [undef] [Memcached::Client::Connection=HASH(0x94a6e00)] [bar] [gondola]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: replace: 127.0.0.1:10008 - 1288727995.11859.bar - gondola
C [replace]: using callback
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
M: replace: 127.0.0.1:10008 - 1288727995.11859.bar - gondola
T: ->replace_multi with various keys is replace_multi ([
  [
    [
      'porridge',
      'sweet'
    ],
    [
      'complex',
      'NP'
    ],
    [
      'ludo',
      'panopticon'
    ]
  ]
]
)
C [replace]: Found callback
C: calling __replace_multi - [
  [
    [
      'porridge',
      'sweet'
    ],
    [
      'complex',
      'NP'
    ],
    [
      'ludo',
      'panopticon'
    ]
  ]
]
C [__replace]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x9461ac0)] [undef] [ARRAY(0x94b4ba0)]
Tuples are [
  [
    'porridge',
    'sweet'
  ],
  [
    'complex',
    'NP'
  ],
  [
    'ludo',
    'panopticon'
  ]
]
Tuple is [
  'porridge',
  'sweet'
]
S: Hash value is 21333, bucket # is 18, bucket value is 127.0.0.1:10009
C: replace 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: replace: 127.0.0.1:10009 - 1288727995.11859.porridge - sweet
Tuple is [
  'complex',
  'NP'
]
S: Hash value is 20, bucket # is 20, bucket value is 127.0.0.1:10009
C: replace 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
Tuple is [
  'ludo',
  'panopticon'
]
S: Hash value is 16253, bucket # is 20, bucket value is 127.0.0.1:10009
C: replace 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C: using callback
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: replace: 127.0.0.1:10009 - 1288727995.11859.complex - NP
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: replace: 127.0.0.1:10009 - 1288727995.11859.ludo - panopticon
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 21333, bucket # is 18, bucket value is 127.0.0.1:10009
M: replace: 127.0.0.1:10009 - 1288727995.11859.porridge - sweet
S: Hash value is 20, bucket # is 20, bucket value is 127.0.0.1:10009
M: replace: 127.0.0.1:10009 - 1288727995.11859.complex - NP
S: Hash value is 16253, bucket # is 20, bucket value is 127.0.0.1:10009
M: replace: 127.0.0.1:10009 - 1288727995.11859.ludo - panopticon
T: ->get to verify replacement is get ([
  'bar'
]
)
C [get]: Found callback
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
C [get]: [bar]
C [get]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94b5200)] [undef] [Memcached::Client::Connection=HASH(0x94a6e00)] [bar]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727995.11859.bar
C [get]: using callback
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727995.11859.bar' => {
    cas => 3,
    data => 'gondola',
    flags => 0
  }
}
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727995.11859.bar
T: ->get a key that is too large and does not exist is get ([
  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
]
)
C [get]: Found callback
S: Hash value is 20907, bucket # is 12, bucket value is 127.0.0.1:10006
M: get: 127.0.0.1:10006 - 1288727995.11859.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
T: ->set a key that is too large and does not exist is set ([
  'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb',
  'lurch'
]
)
C [set]: Found callback
S: Hash value is 25671, bucket # is 9, bucket value is 127.0.0.1:10005
M: set: 127.0.0.1:10005 - 1288727995.11859.bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb - lurch
T: ->replace with a pre-hashed key and non-existent value is replace ([
  [
    '18',
    'ding-dong'
  ],
  'bar'
]
)
C [replace]: Found callback
S: Hash value is 18, bucket # is 18, bucket value is 127.0.0.1:10009
C [replace]: [ARRAY(0x94ab268)] [bar]
C [__replace]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94ab398)] [undef] [Memcached::Client::Connection=HASH(0x94a6f10)] [ARRAY(0x94ab268)] [bar]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: replace: 127.0.0.1:10009 - 1288727995.11859.ding-dong - bar
C [replace]: using callback
C [set]: using callback
C [get]: using callback
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 18, bucket # is 18, bucket value is 127.0.0.1:10009
M: replace: 127.0.0.1:10009 - 1288727995.11859.ding-dong - bar
T: ->replace with a pre-hashed key and an existing value is replace ([
  [
    '19',
    'ding-dong'
  ],
  'baz'
]
)
C [replace]: Found callback
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [replace]: [ARRAY(0x94ab2b8)] [baz]
C [__replace]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94b7ac8)] [undef] [Memcached::Client::Connection=HASH(0x94a6f10)] [ARRAY(0x94ab2b8)] [baz]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: replace: 127.0.0.1:10009 - 1288727995.11859.ding-dong - baz
C [replace]: using callback
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: replace: 127.0.0.1:10009 - 1288727995.11859.ding-dong - baz
T: ->get a value with a pre-hashed key is get ([
  [
    '19',
    'ding-dong'
  ]
]
)
C [get]: Found callback
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [get]: [ARRAY(0x9490af8)]
C [get]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94ba910)] [undef] [Memcached::Client::Connection=HASH(0x94a6f10)] [ARRAY(0x9490af8)]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: get: 127.0.0.1:10009 - 1288727995.11859.ding-dong
C [get]: using callback
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C: get - result {
  '1288727995.11859.ding-dong' => {
    cas => 35,
    data => 'baz',
    flags => 0
  }
}
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: get: 127.0.0.1:10009 - 1288727995.11859.ding-dong
T: ->append without a key is append ([]
)
C [append]: Found callback
T: ->append without a value is append ([
  'foo'
]
)
C [append]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [append]: [foo]
C [__append]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x948c488)] [undef] [Memcached::Client::Connection=HASH(0x94a6ea0)] [foo]
T: ->append with a non-existent value is append ([
  'baz',
  'gorp'
]
)
C [append]: Found callback
S: Hash value is 6429, bucket # is 3, bucket value is 127.0.0.1:10002
C [append]: [baz] [gorp]
C [__append]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94598e8)] [undef] [Memcached::Client::Connection=HASH(0x94a7110)] [baz] [gorp]
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
P: append: 127.0.0.1:10002 - 1288727995.11859.baz - gorp
C [append]: using callback
C [append]: using callback
C [append]: using callback
C [127.0.0.1:10002]: done with request
C [127.0.0.1:10002]: checking for job
S: Hash value is 6429, bucket # is 3, bucket value is 127.0.0.1:10002
M: append: 127.0.0.1:10002 - 1288727995.11859.baz - gorp
T: ->append with an existing value is append ([
  'bar',
  'gorp'
]
)
C [append]: Found callback
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
C [append]: [bar] [gorp]
C [__append]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94ab138)] [undef] [Memcached::Client::Connection=HASH(0x94a6e00)] [bar] [gorp]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: append: 127.0.0.1:10008 - 1288727995.11859.bar - gorp
C [append]: using callback
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
M: append: 127.0.0.1:10008 - 1288727995.11859.bar - gorp
T: ->append_multi with various keys is append_multi ([
  [
    [
      'porridge',
      ' and salty'
    ],
    [
      'complex',
      ' != P'
    ]
  ]
]
)
C [append]: Found callback
C: calling __append_multi - [
  [
    [
      'porridge',
      ' and salty'
    ],
    [
      'complex',
      ' != P'
    ]
  ]
]
C [__append]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94ba9e0)] [undef] [ARRAY(0x94b4a30)]
Tuples are [
  [
    'porridge',
    ' and salty'
  ],
  [
    'complex',
    ' != P'
  ]
]
Tuple is [
  'porridge',
  ' and salty'
]
S: Hash value is 21333, bucket # is 18, bucket value is 127.0.0.1:10009
C: append 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: append: 127.0.0.1:10009 - 1288727995.11859.porridge -  and salty
Tuple is [
  'complex',
  ' != P'
]
S: Hash value is 20, bucket # is 20, bucket value is 127.0.0.1:10009
C: append 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C: using callback
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: append: 127.0.0.1:10009 - 1288727995.11859.complex -  != P
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 21333, bucket # is 18, bucket value is 127.0.0.1:10009
M: append: 127.0.0.1:10009 - 1288727995.11859.porridge -  and salty
S: Hash value is 20, bucket # is 20, bucket value is 127.0.0.1:10009
M: append: 127.0.0.1:10009 - 1288727995.11859.complex -  != P
T: ->get to verify ->append is get ([
  'bar'
]
)
C [get]: Found callback
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
C [get]: [bar]
C [get]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x948e6b0)] [undef] [Memcached::Client::Connection=HASH(0x94a6e00)] [bar]
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727995.11859.bar
C [get]: using callback
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727995.11859.bar' => {
    cas => 4,
    data => 'gondolagorp',
    flags => 0
  }
}
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727995.11859.bar
T: ->append with a pre-hashed key and non-existent value is append ([
  [
    '18',
    'ding-dong'
  ],
  'flagon'
]
)
C [append]: Found callback
S: Hash value is 18, bucket # is 18, bucket value is 127.0.0.1:10009
C [append]: [ARRAY(0x94ab008)] [flagon]
C [__append]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94a68b0)] [undef] [Memcached::Client::Connection=HASH(0x94a6f10)] [ARRAY(0x94ab008)] [flagon]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: append: 127.0.0.1:10009 - 1288727995.11859.ding-dong - flagon
C [append]: using callback
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 18, bucket # is 18, bucket value is 127.0.0.1:10009
M: append: 127.0.0.1:10009 - 1288727995.11859.ding-dong - flagon
T: ->append with a pre-hashed key and an existing value is append ([
  [
    '19',
    'ding-dong'
  ],
  'flagged'
]
)
C [append]: Found callback
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [append]: [ARRAY(0x94ab768)] [flagged]
C [__append]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94b74b8)] [undef] [Memcached::Client::Connection=HASH(0x94a6f10)] [ARRAY(0x94ab768)] [flagged]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: append: 127.0.0.1:10009 - 1288727995.11859.ding-dong - flagged
C [append]: using callback
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: append: 127.0.0.1:10009 - 1288727995.11859.ding-dong - flagged
T: ->get a value with a pre-hashed key is get ([
  [
    '19',
    'ding-dong'
  ]
]
)
C [get]: Found callback
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
C [get]: [ARRAY(0x94bee38)]
C [get]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94baa90)] [undef] [Memcached::Client::Connection=HASH(0x94a6f10)] [ARRAY(0x94bee38)]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: get: 127.0.0.1:10009 - 1288727995.11859.ding-dong
C [get]: using callback
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C: get - result {
  '1288727995.11859.ding-dong' => {
    cas => 39,
    data => 'bazflagonflagged',
    flags => 0
  }
}
S: Hash value is 19, bucket # is 19, bucket value is 127.0.0.1:10009
M: get: 127.0.0.1:10009 - 1288727995.11859.ding-dong
T: ->prepend without a key is prepend ([]
)
C [prepend]: Found callback
T: ->prepend without a value is prepend ([
  'foo'
]
)
C [prepend]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [prepend]: [foo]
C [__prepend]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94ad828)] [undef] [Memcached::Client::Connection=HASH(0x94a6ea0)] [foo]
T: ->prepend with a non-existent value is prepend ([
  'baz',
  'gorp'
]
)
C [prepend]: Found callback
S: Hash value is 6429, bucket # is 3, bucket value is 127.0.0.1:10002
C [prepend]: [baz] [gorp]
C [__prepend]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94ba610)] [undef] [Memcached::Client::Connection=HASH(0x94a7110)] [baz] [gorp]
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
P: prepend: 127.0.0.1:10002 - 1288727995.11859.baz - gorp
C [prepend]: using callback
C [prepend]: using callback
C [prepend]: using callback
C [127.0.0.1:10002]: done with request
C [127.0.0.1:10002]: checking for job
S: Hash value is 6429, bucket # is 3, bucket value is 127.0.0.1:10002
M: prepend: 127.0.0.1:10002 - 1288727995.11859.baz - gorp
T: ->prepend with an existing value is prepend ([
  'foo',
  'gorp'
]
)
C [prepend]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [prepend]: [foo] [gorp]
C [__prepend]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x8f35ea0)] [undef] [Memcached::Client::Connection=HASH(0x94a6ea0)] [foo] [gorp]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: prepend: 127.0.0.1:10003 - 1288727995.11859.foo - gorp
C [prepend]: using callback
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: prepend: 127.0.0.1:10003 - 1288727995.11859.foo - gorp
T: ->prepend_multi with various keys is prepend_multi ([
  [
    [
      'porridge',
      'We love '
    ]
  ]
]
)
C [prepend]: Found callback
C: calling __prepend_multi - [
  [
    [
      'porridge',
      'We love '
    ]
  ]
]
C [__prepend]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94a6840)] [undef] [ARRAY(0x94b74f8)]
Tuples are [
  [
    'porridge',
    'We love '
  ]
]
Tuple is [
  'porridge',
  'We love '
]
S: Hash value is 21333, bucket # is 18, bucket value is 127.0.0.1:10009
C: prepend 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: prepend: 127.0.0.1:10009 - 1288727995.11859.porridge - We love 
C: using callback
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 21333, bucket # is 18, bucket value is 127.0.0.1:10009
M: prepend: 127.0.0.1:10009 - 1288727995.11859.porridge - We love 
T: ->get to verify ->prepend is get ([
  'foo'
]
)
C [get]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [get]: [foo]
C [get]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94ba9e0)] [undef] [Memcached::Client::Connection=HASH(0x94a6ea0)] [foo]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: get: 127.0.0.1:10003 - 1288727995.11859.foo
C [get]: using callback
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C: get - result {
  '1288727995.11859.foo' => {
    cas => 17,
    data => 'gorpbar',
    flags => 0
  }
}
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: get: 127.0.0.1:10003 - 1288727995.11859.foo
T: ->delete without a key is delete ([]
)
C [delete]: Found callback
T: ->delete with a non-existent key is delete ([
  'bang'
]
)
C [delete]: Found callback
S: Hash value is 12473, bucket # is 20, bucket value is 127.0.0.1:10009
C [delete]: [bang]
C [delete]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94902f8)] [undef] [Memcached::Client::Connection=HASH(0x94a6f10)] [bang]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: delete: 127.0.0.1:10009 - 1288727995.11859.bang
C [delete]: using callback
C [delete]: using callback
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 12473, bucket # is 20, bucket value is 127.0.0.1:10009
M: delete: 127.0.0.1:10009 - 1288727995.11859.bang
T: ->delete with an existing key is delete ([
  'foo'
]
)
C [delete]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [delete]: [foo]
C [delete]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x9481830)] [undef] [Memcached::Client::Connection=HASH(0x94a6ea0)] [foo]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: delete: 127.0.0.1:10003 - 1288727995.11859.foo
C [delete]: using callback
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: delete: 127.0.0.1:10003 - 1288727995.11859.foo
T: ->delete_multi with various keys is delete_multi ([
  'complex',
  'panopticon'
]
)
C [delete]: Found callback
C: calling __delete_multi - [
  'complex',
  'panopticon'
]
C [delete_multi]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94b26e8)] [undef] [complex] [panopticon]
Keys are [
  'complex',
  'panopticon'
]
S: Hash value is 20, bucket # is 20, bucket value is 127.0.0.1:10009
key is complex
C: delete_multi 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: delete: 127.0.0.1:10009 - 1288727995.11859.complex
S: Hash value is 23699, bucket # is 11, bucket value is 127.0.0.1:10005
key is panopticon
C: delete_multi 127.0.0.1:10005
C [127.0.0.1:10005]: queuing request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10005]: executing
P: delete: 127.0.0.1:10005 - 1288727995.11859.panopticon
C: using callback
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10005]: done with request
C [127.0.0.1:10005]: checking for job
S: Hash value is 20, bucket # is 20, bucket value is 127.0.0.1:10009
M: delete: 127.0.0.1:10009 - 1288727995.11859.complex
S: Hash value is 23699, bucket # is 11, bucket value is 127.0.0.1:10005
M: delete: 127.0.0.1:10005 - 1288727995.11859.panopticon
T: ->get to verify ->delete is get ([
  'foo'
]
)
C [get]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [get]: [foo]
C [get]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x9489ed0)] [undef] [Memcached::Client::Connection=HASH(0x94a6ea0)] [foo]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: get: 127.0.0.1:10003 - 1288727995.11859.foo
C [get]: using callback
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C: get - result {}
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: get: 127.0.0.1:10003 - 1288727995.11859.foo
T: ->add with a value is add ([
  'foo',
  '1'
]
)
C [add]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [add]: [foo] [1]
C [__add]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94b5290)] [undef] [Memcached::Client::Connection=HASH(0x94a6ea0)] [foo] [1]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: add: 127.0.0.1:10003 - 1288727995.11859.foo - 1
C [add]: using callback
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: add: 127.0.0.1:10003 - 1288727995.11859.foo - 1
T: ->get to verify ->add is get ([
  'foo'
]
)
C [get]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [get]: [foo]
C [get]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x947efc0)] [undef] [Memcached::Client::Connection=HASH(0x94a6ea0)] [foo]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: get: 127.0.0.1:10003 - 1288727995.11859.foo
C [get]: using callback
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C: get - result {
  '1288727995.11859.foo' => {
    cas => 18,
    data => '1',
    flags => 0
  }
}
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: get: 127.0.0.1:10003 - 1288727995.11859.foo
T: ->incr without a key is incr ([]
)
C [incr]: Found callback
T: ->incr with a non-existent key is incr ([
  'bang'
]
)
C [incr]: Found callback
S: Hash value is 12473, bucket # is 20, bucket value is 127.0.0.1:10009
C [incr]: [bang]
C [__incr]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94b4a30)] [undef] [Memcached::Client::Connection=HASH(0x94a6f10)] [bang]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: incr: 127.0.0.1:10009 - 1288727995.11859.bang - 1
C [incr]: using callback
C [incr]: using callback
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 12473, bucket # is 20, bucket value is 127.0.0.1:10009
M: incr: 127.0.0.1:10009 - 1288727995.11859.bang - 1
T: ->incr with an existing key is incr ([
  'foo'
]
)
C [incr]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [incr]: [foo]
C [__incr]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94b7668)] [undef] [Memcached::Client::Connection=HASH(0x94a6ea0)] [foo]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: incr: 127.0.0.1:10003 - 1288727995.11859.foo - 1
C [incr]: using callback
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: incr: 127.0.0.1:10003 - 1288727995.11859.foo - 1
T: ->incr with an existing key and an amount is incr ([
  'foo',
  '72'
]
)
C [incr]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [incr]: [foo] [72]
C [__incr]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94616a0)] [undef] [Memcached::Client::Connection=HASH(0x94a6ea0)] [foo] [72]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: incr: 127.0.0.1:10003 - 1288727995.11859.foo - 72
C [incr]: using callback
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: incr: 127.0.0.1:10003 - 1288727995.11859.foo - 72
T: ->get to verify ->incr is get ([
  'foo'
]
)
C [get]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [get]: [foo]
C [get]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94901b8)] [undef] [Memcached::Client::Connection=HASH(0x94a6ea0)] [foo]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: get: 127.0.0.1:10003 - 1288727995.11859.foo
C [get]: using callback
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C: get - result {
  '1288727995.11859.foo' => {
    cas => 20,
    data => '74',
    flags => 0
  }
}
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: get: 127.0.0.1:10003 - 1288727995.11859.foo
T: ->decr without a key is decr ([]
)
C [decr]: Found callback
T: ->decr with a non-existent key is decr ([
  'bang'
]
)
C [decr]: Found callback
S: Hash value is 12473, bucket # is 20, bucket value is 127.0.0.1:10009
C [decr]: [bang]
C [__decr]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94aaed8)] [undef] [Memcached::Client::Connection=HASH(0x94a6f10)] [bang]
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: decr: 127.0.0.1:10009 - 1288727995.11859.bang - 1
C [decr]: using callback
C [decr]: using callback
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
S: Hash value is 12473, bucket # is 20, bucket value is 127.0.0.1:10009
M: decr: 127.0.0.1:10009 - 1288727995.11859.bang - 1
T: ->decr with an existing key is decr ([
  'foo'
]
)
C [decr]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [decr]: [foo]
C [__decr]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94ab3a8)] [undef] [Memcached::Client::Connection=HASH(0x94a6ea0)] [foo]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: decr: 127.0.0.1:10003 - 1288727995.11859.foo - 1
C [decr]: using callback
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: decr: 127.0.0.1:10003 - 1288727995.11859.foo - 1
T: ->decr with an existing key is decr ([
  'foo',
  18
]
)
C [decr]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [decr]: [foo] [18]
C [__decr]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94a6f70)] [undef] [Memcached::Client::Connection=HASH(0x94a6ea0)] [foo] [18]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: decr: 127.0.0.1:10003 - 1288727995.11859.foo - 18
C [decr]: using callback
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: decr: 127.0.0.1:10003 - 1288727995.11859.foo - 18
T: ->get to verify ->decr is get ([
  'foo'
]
)
C [get]: Found callback
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C [get]: [foo]
C [get]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x9461520)] [undef] [Memcached::Client::Connection=HASH(0x94a6ea0)] [foo]
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: get: 127.0.0.1:10003 - 1288727995.11859.foo
C [get]: using callback
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C: get - result {
  '1288727995.11859.foo' => {
    cas => 22,
    data => '55',
    flags => 0
  }
}
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: get: 127.0.0.1:10003 - 1288727995.11859.foo
T: ->get with all keys set so far is get_multi ([
  [
    'bar',
    'foo'
  ]
]
)
C [get]: Found callback
C: calling __get_multi - [
  [
    'bar',
    'foo'
  ]
]
C [get_multi]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x93b9e38)] [undef] [ARRAY(0x94b7798)]
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C: get 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: get: 127.0.0.1:10003 - 1288727995.11859.foo
C: get 127.0.0.1:10008
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727995.11859.bar
C: using callback
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C: get - result {
  '1288727995.11859.foo' => {
    cas => 22,
    data => '55',
    flags => 0
  }
}
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {
  '1288727995.11859.bar' => {
    cas => 4,
    data => 'gondolagorp',
    flags => 0
  }
}
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727995.11859.bar
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: get: 127.0.0.1:10003 - 1288727995.11859.foo
T: ->incr_multi with various keys is incr_multi ([
  [
    [
      'foo'
    ]
  ]
]
)
C [incr]: Found callback
C: calling __incr_multi - [
  [
    [
      'foo'
    ]
  ]
]
C [__incr]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94ba610)] [undef] [ARRAY(0x94ab578)]
Begin on command CV to establish callback
Tuples are [
  [
    'foo'
  ]
]
Tuple is [
  'foo'
]
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
keys is foo, server is 127.0.0.1:10003
C: incr 127.0.0.1:10003
Begin on command CV before enqueue
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: incr: 127.0.0.1:10003 - 1288727995.11859.foo - 1
End on command CV 
C: using callback
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
End on command CV from server CV
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: incr: 127.0.0.1:10003 - 1288727995.11859.foo - 1
T: ->incr_multi with various keys is incr_multi ([
  [
    [
      'braga',
      1,
      17
    ],
    [
      'foo',
      7
    ]
  ]
]
)
C [incr]: Found callback
C: calling __incr_multi - [
  [
    [
      'braga',
      1,
      17
    ],
    [
      'foo',
      7
    ]
  ]
]
C [__incr]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x9455848)] [undef] [ARRAY(0x94b7a58)]
Begin on command CV to establish callback
Tuples are [
  [
    'braga',
    1,
    17
  ],
  [
    'foo',
    7
  ]
]
Tuple is [
  'braga',
  1,
  17
]
S: Hash value is 6004, bucket # is 19, bucket value is 127.0.0.1:10009
keys is braga, server is 127.0.0.1:10009
C: incr 127.0.0.1:10009
Begin on command CV before enqueue
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: incr: 127.0.0.1:10009 - 1288727995.11859.braga - 1
Tuple is [
  'foo',
  7
]
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
keys is foo, server is 127.0.0.1:10003
C: incr 127.0.0.1:10003
Begin on command CV before enqueue
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: incr: 127.0.0.1:10003 - 1288727995.11859.foo - 7
End on command CV 
C: using callback
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
End on command CV from server CV
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
End on command CV from server CV
S: Hash value is 6004, bucket # is 19, bucket value is 127.0.0.1:10009
M: incr: 127.0.0.1:10009 - 1288727995.11859.braga - 1
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: incr: 127.0.0.1:10003 - 1288727995.11859.foo - 7
T: ->decr_multi with various keys is decr_multi ([
  [
    [
      'braga',
      3
    ],
    [
      'bartinate',
      7,
      33
    ]
  ]
]
)
C [decr]: Found callback
C: calling __decr_multi - [
  [
    [
      'braga',
      3
    ],
    [
      'bartinate',
      7,
      33
    ]
  ]
]
C [__decr]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94812a0)] [undef] [ARRAY(0x94b4b90)]
Begin on command CV to establish callback
Tuples are [
  [
    'braga',
    3
  ],
  [
    'bartinate',
    7,
    33
  ]
]
Tuple is [
  'braga',
  3
]
S: Hash value is 6004, bucket # is 19, bucket value is 127.0.0.1:10009
keys is braga, server is 127.0.0.1:10009
C: decr 127.0.0.1:10009
Begin on command CV before enqueue
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
P: decr: 127.0.0.1:10009 - 1288727995.11859.braga - 3
Tuple is [
  'bartinate',
  7,
  33
]
S: Hash value is 23809, bucket # is 16, bucket value is 127.0.0.1:10008
keys is bartinate, server is 127.0.0.1:10008
C: decr 127.0.0.1:10008
Begin on command CV before enqueue
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: decr: 127.0.0.1:10008 - 1288727995.11859.bartinate - 7
End on command CV 
C: using callback
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
End on command CV from server CV
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
End on command CV from server CV
S: Hash value is 6004, bucket # is 19, bucket value is 127.0.0.1:10009
M: decr: 127.0.0.1:10009 - 1288727995.11859.braga - 3
S: Hash value is 23809, bucket # is 16, bucket value is 127.0.0.1:10008
M: decr: 127.0.0.1:10008 - 1288727995.11859.bartinate - 7
T: ->flush_all to clear servers is flush_all ([]
)
C [flush_all]: Found callback
C [flush_all]: enqueuing to 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
C [flush_all]: enqueuing to 127.0.0.1:10004
C [127.0.0.1:10004]: queuing request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10004]: executing
C [flush_all]: enqueuing to 127.0.0.1:10007
C [127.0.0.1:10007]: queuing request
C [127.0.0.1:10007]: checking for job
C [127.0.0.1:10007]: executing
C [flush_all]: enqueuing to 127.0.0.1:10002
C [127.0.0.1:10002]: queuing request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10002]: executing
C [flush_all]: enqueuing to 127.0.0.1:10009
C [127.0.0.1:10009]: queuing request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10009]: executing
C [flush_all]: enqueuing to 127.0.0.1:10005
C [127.0.0.1:10005]: queuing request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10005]: executing
C [flush_all]: enqueuing to 127.0.0.1:10006
C [127.0.0.1:10006]: queuing request
C [127.0.0.1:10006]: checking for job
C [127.0.0.1:10006]: executing
C [flush_all]: enqueuing to 127.0.0.1:10008
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
C [flush_all]: enqueuing to 127.0.0.1:10001
C [127.0.0.1:10001]: queuing request
C [127.0.0.1:10001]: checking for job
C [127.0.0.1:10001]: executing
C: using callback
C [127.0.0.1:10007]: fatal error Broken pipe
C [connect]: Done connecting 127.0.0.1:10007
C [127.0.0.1:10007]: failing requests
C [127.0.0.1:10007]: failing request {
  failback => sub { "DUMMY" },
  request => sub { "DUMMY" }
}
C [127.0.0.1:10006]: done with request
C [127.0.0.1:10006]: checking for job
C [127.0.0.1:10005]: done with request
C [127.0.0.1:10005]: checking for job
C [127.0.0.1:10009]: done with request
C [127.0.0.1:10009]: checking for job
C [127.0.0.1:10002]: done with request
C [127.0.0.1:10002]: checking for job
C [127.0.0.1:10004]: done with request
C [127.0.0.1:10004]: checking for job
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10001]: done with request
C [127.0.0.1:10001]: checking for job
M: flush_all: 127.0.0.1:10003
M: flush_all: 127.0.0.1:10004
M: flush_all: 127.0.0.1:10002
M: flush_all: 127.0.0.1:10009
M: flush_all: 127.0.0.1:10006
M: flush_all: 127.0.0.1:10005
M: flush_all: 127.0.0.1:10008
M: flush_all: 127.0.0.1:10001
T: ->get with all keys set so far is get_multi ([
  [
    'bar',
    'foo'
  ]
]
)
C [get]: Found callback
C: calling __get_multi - [
  [
    'bar',
    'foo'
  ]
]
C [get_multi]: [Memcached::Client=HASH(0x94a74d0)] [AnyEvent::CondVar=HASH(0x94a8d80)] [undef] [ARRAY(0x948e2a0)]
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
C: get 127.0.0.1:10003
C [127.0.0.1:10003]: queuing request
C [127.0.0.1:10003]: checking for job
C [127.0.0.1:10003]: executing
P: get: 127.0.0.1:10003 - 1288727995.11859.foo
C: get 127.0.0.1:10008
C [127.0.0.1:10008]: queuing request
C [127.0.0.1:10008]: checking for job
C [127.0.0.1:10008]: executing
P: get: 127.0.0.1:10008 - 1288727995.11859.bar
C: using callback
C [127.0.0.1:10003]: done with request
C [127.0.0.1:10003]: checking for job
C: get - result {}
C [127.0.0.1:10008]: done with request
C [127.0.0.1:10008]: checking for job
C: get - result {}
S: Hash value is 6086, bucket # is 17, bucket value is 127.0.0.1:10008
M: get: 127.0.0.1:10008 - 1288727995.11859.bar
S: Hash value is 27978, bucket # is 6, bucket value is 127.0.0.1:10003
M: get: 127.0.0.1:10003 - 1288727995.11859.foo
Done with Traditional/Binary async
Checking port 10007 for existing process
Using port 10007
Fork successful, pid 11934
Checking 127.0.0.1:10007
Stopping 127.0.0.1:10007
Pid is 11934
Trying TERM
Waitpid returned 11934
Stopping 127.0.0.1:10004
Pid is 11868
Trying TERM
Waitpid returned 11868
Stopping 127.0.0.1:10006
Pid is 11886
Trying TERM
Waitpid returned 11886
Stopping 127.0.0.1:10005
Pid is 11892
Trying TERM
Waitpid returned 11892
Stopping 127.0.0.1:10001
Pid is 11922
Trying TERM
Waitpid returned 11922
Stopping 127.0.0.1:10003
Pid is 11861
Trying TERM
Waitpid returned 11861
Stopping 127.0.0.1:10002
Pid is 11916
Trying TERM
Waitpid returned 11916
Stopping 127.0.0.1:10009
Pid is 11875
Trying TERM
Waitpid returned 11875
Stopping 127.0.0.1:10008
Pid is 11928
Trying TERM
Waitpid returned 11928
